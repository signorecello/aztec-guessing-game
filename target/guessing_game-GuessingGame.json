{"noir_version":"0.25.0+d1ed549202e5a840845298c931418e173eb5437c","name":"GuessingGame","functions":[{"name":"pair","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"address_note::aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"address_note::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"address_note::aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":33}]},"return_type":{"abi_type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"address_note::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"address_note::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"address_note::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[6879,6880,6881,6882,6883,6884,6885,6886,6887,6888,6889,6890,6891,6892,6893,6894,6895,6896,6897,6898,6899,6900,6901,6902,6903,6904,6905,6906,6907,6908,6909,6910,6911,6912,6913,6914,6915,6916,6917,6918,6919,6920,6921,6922,6923,6924,6925,6926,6927,6928,6929,6930,6931,6932,6933,6934,6935,6936,6937,6938,6939,6940,6941,6942,6943,6944,6945,6946,6947,6948,6949,6950,6951,6952,6953,6954,6955,6956,6957,6958,6959,6960,6961,6962,6963,6964,6965,6966,6967,6968,6969,6970,6971,6972,6973,6974,6975,6976,6977,6978,6979,6980,6981,6982,6983,6984,6985,6986,6987,6988,6989,6990,6991,6992,6993,6994,6995,6996,6997,6998,6999,7000,7001,7002,7003,7004,7005,7006,7007,7008,7009,7010,7011,7012,7013,7014,7015,7016,7017,7018,7019,7020,7021,7022,7023,7024,7025,7026,7027,7028,7029,7030,7031,7032,7033,7034,7035,7036,7037,7038,7039,7040,7041,7042,7043,7044,7045,7046,7047,7048,7049,7050,7051,7052,7053,7054,7055,7056,7057,7058,7059,7060,7061,7062,7063,7064,7065,7066,7067,7068,7069,7070,7071,7072,7073,7074,7075,7076,7077,7078,7079,7080,7081,7082,7083,7084,7085,7086,7087,7088]},"bytecode":"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","debug_symbols":""},{"name":"register","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"address_note::aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"address_note::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"address_note::aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"address":[{"start":33,"end":34}],"inputs":[{"start":0,"end":33}],"secret":[{"start":34,"end":35}]},"return_type":{"abi_type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"address_note::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"address_note::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"address_note::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800]},"bytecode":"","debug_symbols":"7Z3RjiM9cqXf5b8eDJJBMkj6VRZ7MbvrBQwYY8OeXWBh+N23Mrsl5biipNbXKiqUiiv7x+jrjDo8SYWYPMn/+OOf/+V//uVv//Qvf/33P/7hP/5Iyx//8N/+449//9e//HX9z3//21/+7W9//MPypz/+8a//6+P//uef/vjf//TP//jHP9SP//fTx1IdPz+Yejp/NIn1WUn99GGRoudPSyrGp1vO6eenWx717z793//0R0ovWbXMqjpLPlWde/7NqvNvVF2T9p+frLL084dbsv7EZZHT37jI5Y+URYxPlyHnf7ntPju2ossrFl1fsWj9jaJbqSfnjcvNlRY1axY91Zyy3Ph0Tvn0T2ep4zdvgfYbf2M/S91rvvU3ftR6+htz67tPV2tc2qnouv5Vu8+uNfcXrHm8Xs2yvGDN6QVrlhesOb9gzeUFa64vWLO+YM0v+D0oTr8H86Vb0081O/0evFZz9vk9qEv7+WGt6VPNPr8Hm7ZzV1xvfLZKOY1JvnS5qVhdbkqlnTto1b/79KqGz2/YZ6nh87v7WWqUN1Pj/JWS0v5f/qmGz37jWWr47GSepYbPHunb1JDl9LclkeWTGj67r2ep4bOve5IaxWfH+I3fsHpRI31S4wC9aD/9w7pfn72pRuqXX2152cQ4QCv6ODF8dqIjn0oYo9y8T04Pr2q9CJezVYSev137pQT5oUQJJX4q4bMDfYYSPrvPZyjhs/N8hhI+u85nKOGz43yCEtVnt/kMJXx2ms9Qwmeb+Qwlosc8KVFCiZ9KRI95UiJ6zJMS0WOelIge86RE9Jg/ldDoMU9KRI95UiJ6zJMS0WOelCihxE8losc8KRE95kmJ6DFPSkSPeVIiesyfSrToMU9KRI95UiJ6zJMS0WOelCihxE8losc8KRE95kmJ6DFPSkSPeVIiesyfSvToMU9KRI95UiJ6zJMSr99jtnTab9qk75VY/7xy7D/v9bvBLidz9iY3fHx1Z3F//X7wcVq8fkf4OC1evyd8nBav3xU+TIvx+n3h47R4/c7wcVq8fm94rWUYr9/wPW6oS2hx1iJayYsW0UpetIhW8qJFtJIXLaKVPGuRltfvJa/1DGmJ/nA32K/fID5QjGgnd2KUEOMiRjSUOzGio9yJES3lTozX7ymvtw7RJ14GO8Wa406MaCp3YkRTuRMjmsqdGCXEuIgRTeVOjNdvKq+2Dk5PqnjSYMfa406MaCovYjg9tONJYkRTuRMjmsqdGNFU7sQox24dnB6i8qTBjsXHnRjRVO7EiKZyJ0Y0lRcxnJ6A8yQxoqnciXHs/ZHJ6Vk5TxrsEmJcxIimcidGNJU7MaKp3IkRTeVOjGgqL2I4PSTnYa2D02NvnjTYsfi4EyOayp0YJcS4iBFN5U6MaCp3YkRTuRPj4NskD3C2zeMG+wDH2zxQjGgqd2JEU7kTI5rKnRglxLiIEU3lToyDb5M8wDE2DxzsWHzciRFN5UWMA5xn80AxoqnciRFN5U6MaCp3YpRjtw4HOLHmgYMdi487MaKp3IkRTeVOjGgqL2Ic4ACbB4oRTeVOjINvkzzA4TQPHOwSYlzEiKZyJ0Y0lTsxoqnciRFN5U6MaCovYhzgxJqrrcMBzqF54GDH4uNOjGgqd2KUEOMiRjSVOzGiqdyJEU3lToyDb5OMA2x2gx0n2OzFiKZyJ0Y0lTsxoqnciVFCjIsY0VTuxDj4Nsk4yGY/2LH4uBMjmsqzGHKAo2weKEY0lTsxoqnciRFN5U6McujWQeIom/1gx+LjToxoKndiRFO5EyOayosYce7NXoxoKndiHHubpMRRNvvBLiHGRYxoKndiRFO5EyOayp0Y0VTuxIim8iLGAc69udo6xFE2+8GOxcedGNFU7sQoIcZFjGgqd2JEU7kTI5rKnRjH3iYpcZTNbrDjKJu9GNFU7sSIpnInRjSVOzFKiHERI5rKnRjH3iYpcZTNfrBj8XEnRjSVFzEOcJTNA8WIpnInRjSVOzGiqdyJUVyK0Vv/QoytaLP5S8so579010SYpUsdJwlF5aLhB2l8OrfTH1rS5Q/t6Uc1+vvVjNZ+fjinj3/2ejWieZxqb6o7eaxP13aqQ8dy47Mt55MqLY96/rSk8uNPbe/zp3bXf2rT5TwDlL/77Fb8eOHi7ZNW3BSfPqaf80S2lBufVjn9qZp3dQw156RymvWktsunxfwTW9dz0fs5cpj/ci/nf3l/a4wfiqdQfLLiEopPVjyH4pMVL6H4oxVXuXSt5bPiNRSfrLjvhvg1Fa8Xxfd/ofnhJOd/OeV+/cNdTqPSS/40kr77/RjJvxtJPS889PppJH3/+ImR/OWR1Pgl+DojOc5flKOM6x9t9fTX7euVHyuSGj9G33DQ4/fwGw56/CR/oUGvJzFGz78z6CUG/f0GPRYmXmfQ05JPSqellU9Nue/HnTGW94xlLF8dZyxjAes4YxlLWC80lh8rjic1pLffaJNarHe95bDHitdbDnuseb3SsI98VkPS7wx7rHq95bCXGPZ3HPZY+XrysOv5w6ndWMO8ukGkxbrXC43ktW0FLVa9jjKSseb1OiP5qMfGLRbH3m/QeyyNvdCgP+ixcY+FsTcc9FgWe51Bv/Ecq8da13HGssRYHmYsY1XqOGMZ61IvNJYPe3rYYxHrLYc9VrzecthjzeuVhv1RTw9HrHq95bDHutdbDnusfD152M8jKR/j/l9/aI1YzHI9PCWG56nDU5aTeFJy/Z15MFanjjKSsTZ1lJGM5aajjGSsID15JMv5w0V/Z0/MiEWhY4xkXmKd5ygjGUs3RxnJ+Ln/8JFsy/kXfEv91s/9B73a80OdGMnXGckr+/3zEisDRxnJWBl4nZF80Cb+vMQiwhsOeqw3vOGgx9LECw36Y5IbOcUqxhsOeix4vM6gX99KnlNsQDnOWMby1XHGssRYHmYsYwnrhcbyURv4c4r1rrcc9ljxesthjzWvVxr2B23gzylWvd5x2CXWvd5y2GPl68nD/qBXe2aJda8XGslr2wokVr2OMpIlRvJlRvJRj40lFsfecNBjaeyFBv1Bj40lFsbecNBjWex1Bv3GcyyJta7DjGWOBazjjGWsSh1nLGNd6oXG8mFPD3MsYr3lsJcY9ncc9ljzeqVhf9TTwxyrXm857LHu9ZbDHitfTx72a++OzDkWszwPT4n1qecOz6NePpdLrE4dZSRjbeooIxnLTUcZyRIj+dyRfNTL50osCh1lJGOd5ygjGUs3RxlJ56sx+fJUuCzpNUay9nL+l8fy6Re88wWW4ylena+ZHFBx52sbB1Tc+RrEKyqucnnZdvmsuPO1ggMq7vyX4EsqftepY496DXl1/kswRnI/kteyidX5L8EYyV8eyfgl+Doj+ajAYY0fo+836Bq/h99w0OMn+QsN+oNSphqrAm846LEw8TqDfiP2piXG8jBjGctXxxnLWMA6zljGEtYLjeXDwoYa611vOeyx4vWOw95izeuVhv1RYcMWq15vOeyx7vWWwx4rX08e9ke9hryVGMnXGclr2wparHodZSRjzet1RvJRj41bLI694aDH0tgLDfqDHhu3WBh7v0HvsSz2OoN+4zlWj7Wu44xlLGAdZyxjVeo4Y1liLF9nLB/29LDHItZbDnuseL3lsMea1ysN+6OeHvZY9XrLYY91r3cc9hErX08e9qvvuR6xmOV6eGJ96rnD87AX5Y5YnTrKSJYYyYOMZCw3HWUkYwXpySP5qBfljlgUOspIxjrPUUYylm6OMZIf6sRIPvfUsQe92rMssTLwQiN5Zb9/WWJl4CgjWWIkX2YkH7SJvyyxiPCGgx7rDW846LE08UKD/pjkRlliFeMNBz0WPF5n0K9vJS8pNqAcZyxj+eo4YxkLWMcZy1jCeqGxfNQG/pJKDPs7DnuseL3lsMea1ysN+4M28JcUq15vOeyx7vWWwx4rX08e9ge92rNIrHu90Ehe21Ygsep1lJGMNa/XGclHPTaWWBx7w0EvMeivM+gPemwssTD2hoMey2KvM+g3nmNJrHUdZyxjAes4YxmrUocZyxzrUi80lg97ephjEesthz1WvN5y2GPN65WG/VFPD3OJYX/HYY91r7cc9lj5evKwX3t3ZMmxmOV6eGJ96rnD86iXz5Ucq1MHGckSa1NHGclYbjrKSMYK0pNH8lEvnyuxKHSUkSwxkgcZyVi6OcpIOl+NKSLnkSx//+mtfOerFbfKd/5r/lb5zn/ClvPbclPZbyn4WX51/rvtVvnOf6zcKt95h17Pe7pTXa/+X8t33pbeKr84L39ZLuWnz+U7b0Bule/8W7f288Merflz+c6/dW+V7/xbV9upbUxNjYnT+bfujfLV+bfurfKdf+veKt/5t25r50L6Pkp1Kt/5t+6t8p1/694q3/e3riznnyuy5Hbj0yWfbpRS9z/krar1/Be2pf/dZzdZfH+bP00W313C02Tx3X18nywtnbqyJoYsvruaZ8nSfHdLT5PFdxf2nXPLWZbdL5uzLL67uymyNMMtvrvGO2UZp0LqqDdkSamcfw18dHTnT+efupTQxdTFe5+7XHTRW7pUOf3TtV50ydn88XheM+z7u+iHKN673KeI4r3HfYoo3jvcp4jivb99hijde3f7FFG897ZPEcV7Z/sUUbz3tU8RpYQon0WJjtYQJTpaQ5ToaA1RoqM1RImO9rMoIzpaQ5ToaA1RoqM1RImO1hClhCifRYmO1hAlOlpDlOhoDVGiozVEiY72kyh1iY7WECU6WkOU6GgNUaKjNUQpIcpnUaKjNUSJjtYQJTpaQ5ToaA1RoqP9LEqKjtYQJTpaQ5ToaA1RoqM1RCkhymdRoqM1RImO1hAlOlpDlOhoDVGio/0sivNTm58kSnS0hijR0RqiREdriFJClM+iREdriBIdrSFKdLSGKNHRGqJER/tZFOfnPT5JlOhoDVGiozVEiY7WEKWEKJ9FiY7WECU6WkOU6GgNUaKjNUSJjvazKM5PiXqSKNHRGqJER2uIEh2tIUoJUT6LEh2tIUp0tIYo0dEaokRHa4gSHe1nUZyfn/MkUaKjNUSJjtYQJTpaQ5QSonwW5UgdbUunV+/uX+z9Icr2lx6pTb3+lx6p9+znw8Z6kxtGv/rq5er8bKanyXKk/vNxsjg/S+ppshypB32gLEfqQh8oy5H60AfKUt6lFXF/rNeTDHCkXvSBskTjasoSjaspSzSulizuj/V6kizRuJqyHKlxvdqKuD+p60kGKCGLJUs0rqYs0biaskTjasoSjaspSzSuliyHOrHraityqGO4HmiAWEQ1ZYnG1ZSlhCyWLNG4mrJE42rKEo2rKcuRGtfrrUj0opYBDnXW1gNlicbVlCUaV1OWaFxNWUrIYskSjaspy9tsWz3UYVoPNEAsopqyRONqyKKHOlLrgbJE42rKEo2rKUs0rqYs5U1aET3UeVkPNEAsopqyRONqyhKNqylLNK6WLIc6OeuBskTjasryLttW9VBHYj3QACVksWSJxtWUJRpXU5ZoXE1ZonE1ZYnG1ZLlUAdkXW1FDnXq1QMNEIuopizRuJqylJDFkiUaV1OWaFxNWaJxNWV5l22reqiDrR5ngEMdbfVAWaJxNWWJxtWUJRpXU5YSsliyRONqyvIu21b1UGdXPdAAsYhqyhKNqyXLoU6weqAs0biaskTjasoSjaspS3mXVuRQx1M90ACxiGrKEo2rKUs0rqYs0bhashzqoKoHyhKNqynL22xbPdQJVA80QAlZLFmicTVlicbVlCUaV1OWaFxNWaJxtWQ51PlWV1uROLLKNkAsopqyRONqylJCFkuWaFxNWaJxNWWJxtWU5W22rcaRVaYB4sgqW5ZoXE1ZonE1ZYnG1ZSlhCyWLNG4mrK8zbbVOLLKNkAsopqyRONqyXKoI6seKEs0rqYs0biaskTjaspS3qUViSOrbAPEIqopSzSupizRuJqyRONqyRLnW9myRONqyvI221bjyCrbACVksWSJxtWUJRpXU5ZoXE1ZonE1ZYnG1ZClHep8q2utSIsjq2wDxCKqKUs0rqYsJWSxZInG1ZQlGldTlmhcTVneZdtqiyOrTAPEkVW2LNG4mrJE42rKEo2rKUsJWSxZonE1ZXmXbastjqyyDRCLqKYs0bhashzqyKoHyhKNqylLNK6mLNG4mrKUd2lF4sgq2wCxiGrKEo2rKUs0rqYs0bhassT5VrYs0biasrzLttUWR1bZBighiyVLNK6mLNG4mrJE42rKEo2rKUs0rpYshzrf6morEkdW2QaIRVRTlmhcTVlKyGLJEo2rKUs0rqYs0biasrzNttU4sso0QBxZZcsSjaspSzSupizRuJqylJDFkiUaV1OWt9m2GkdW2QaIRVRTlmhcLVkOdWTVA2WJxtWUJRpXU5ZoXE1Zyru0InFklW2AWEQ1ZYnG1ZQlGldTlmhcLVnifCtblmhcTVneZttqHFllG6CELJYs0biaskTjasoSjaspSzSupizRuFqyHOp8q6utSBxZZRsgFlFNWaJxNWUpIYslSzSupizRuJqyRONqyvI221bjyCrTAHFklS1LNK6mLNG4mrJE42rKUkIWS5ZoXE1Z3mbbahxZZRsgFlFNWaJxNWTphzqy6oGyRONqyhKNqylLNK6mLOVNWpEeR1bZBohFVFOWaFxNWaJxNWWJxtWSJc63smWJxtWU5V22rfY4sso2QAlZLFmicTVlicbVlCUaV1OWaFxNWaJxtWQ51PlWV1uROLLKNkAsopqyRONqylJCFkuWaFxNWaJxNWWJxtWU5V22rfY4sso0QBxZZcsSjaspSzSupizRuJqylJDFkiUaV1OWd9m22uPIKtsAsYhqyhKNqyXLoY6seqAs0biaskTjasoSjaspS3mXViSOrLINEIuopizRuJqyRONqyhKNqyVLnG9lyxKNqynL22xbjSOrbAOUkMWSJRpXU5ZoXE1ZonE1ZYnG1ZQlGldLlkOdb3W1FYkjq2wDxCKqKUs0rqYsJWSxZInG1ZQlGldTlmhcTVneZttqHFllGiCOrLJlicbVlCUaV1OWaFxNWUrIYskSjaspi+/GNY3Sv5JlK99uMFPu5/J17MvfILv9Su1UWJJVyv8C2Z2M6FldGfW6UDkt9SxUughVf/wtXxwHlM9Qyus/e+0KH3/tedzysuyGolkuKqcP935xUe2mPcd51P7OEMP6d1v++dmx1Osf/aiym3+d2WnmfLJ9yzuxJZUfAqaDCDguplqSXv/sTVEkRPksSp4sSlr0MiONsZdlq6c8sR5J8qmeOrsekfM/Ldqv26bUchrdUnfTe0s/itdXLr5NL35cZuCSb9yw5WwbKaNcn65LP30N1Hy5BfuPr9MvDpx5xb+zpVMZrej+7zTmsNLOs8BSdtPSQiaxcRgJdZya36bluoRp6HL+zkiXkj++S4CGYzmODc9deF/af73dRnL9d9as598ENV3/O/O5Ta/7luHHeuMXB9PkszapLDe6dD3/mdouf2X58cX4xQkvJZ11/JjUD9ejy7nzyruvt9LJDVcOIuAj29EvToJ5c1F0sig3evQvTmuZU4/Ro39xTMo31vPANveLw0xeovjxxZEj31n8PV+muZ6mdvn4rrw+XV/r0ccXZ4i84t/5pB59fHHeyCtK+KwefSz5ODa80qOPpfj+O/u5D9DdfWH+ndd6dOl/tt9993GHtbNr2uVXwEgnTBnWGNYZNhBmv8jqNpYYJjZ2tqeIlD32p3s+/PMaecI1ym9fQ1M7/9wb1z+a6uWxUq2XfzeVcqqnOqtHndXTnNXTndUzfNVTFmf1JGf1iLN6srN6nM3Pxdn8XJzNz8XZ/Fyczc/F2fxcnc3P1dn8XJ3Nz9XZ/Fydzc/V2fxcnc3P1dn8XJ3Nz9XZ/KzO5md1Nj/r1Pu9LudVqXRZlZKln6pRV9VM9XLNlwcBxaimLa6qSa6qEVfVZFfVFFfVVFfVfON88/MK7duv8PsdQDs/4GjWGm8b332Fvnz7FdK3X0G+/Qr5269Qvv0Kv3//t/Pjvr785v3f1VU1bWY1qfRzb1hGM3rD3p3VM3zVMxZn9SRn9YizevLUeupl20AV67fXKM7qqc7qUWf1NGf1dGf1DF/1pGXuBL1fbCnNLCh5K0i8FZS9FVS8FVS9FaTeCmpPK6ja81D3VtBwVlBavBWUvBX0+zN1l9N692gNfvRUTXZVTXFVTXVVjbqqprmqpruqZniqRhZX1SRX1biai8XVXCyu5mJxNReLq7lYXM3F4mouFldzcXY1F2dXc3F2NRdnV3NxdjUXZ1dzcXY1F2dXc3F2NRdnV3NxcTUXF1dzcXE1FxdXc3FxNRcXV3NxcTUXF1dzcXE1FxdXc3F1NRdXV3NxdTUXV1dzcXU1F1dXc3F1NRdXV3NxdTUXV1dzsbqai9XVXKyu5mJ1NRerq7lYXc3F6mouVldzsbqai9XVXNxczcXN1VzcXM3FzdVc3FzNxc3VXNxczcXN1VzcXM3FzdVc3F3Nxd3VXNxdzcXd1VzcXc3F3dVc3F3Nxd3VXNxdzcXd1Vw8XM3Fw9VcPFzNxcPVXDxczcXD1Vw8XM3Fw9VcPFzNxcPTXCyLp7lYFk9zsSye5mJZPM3Fsniai2XxNBfL4mkulsXTXCxp6nxz69VikpKvcqbeVbdehCJzI1S3y1Ff5TRf5XRf5QxX5czNUd0u5xvnndMl5Psvkb//EuXbLzF3m/XN74C5+6xvllN8fWEXX1/Yc7da3y5n6m+EWk4HYdUqZjnFVznVVznqq5zmq5zJ7Uw/l5PNcoarcuriq5zkqxzxVU72VU5x1QpXXz8yq68fmdXXj8zq60dm9fUjU339yNTkqxzxVU72VY6vWVl9zcrqa1ZWX7Oy+pqV1des3HzNys3XrNx8zcrN16zcfM3Kzdes3HzNys3XrNx8zcrN16zcfc3K3des3H3Nyt3XrNx9zcrd16zcfc3K3des3H3Nyt3XrDx8zcrD16w8fM3Kw9WhkTJcnRopo/kqp/sqZ3gqJy9zT9W88fAxL8lXOeKrnOyrnOKrnMlHa15/2pcX9VVO81VO91XOcFVOWnyV4+qw45zEVzmujjvOqfgqx9WBxzmpr3Kar3K6r3JcHUCfxdUJ9Fl8zcria1YWX7Oy+JqVxdesLL5mZfE1K4uvWVl8zcrZ16ycfc3K2desnH3NytnXrJx9zcrZ16ycfc3K2desnH3NysXXrFx8zcrF16xcfM3KxdGsXOqfv/gVqqcrfKyDn7GeTtQXPxZvUQlRgqiMqHI/tW5Ntai2lJ9Uq5dR6v1MNUR1RA1C2c3nTSohShBljnJflp/U/mzmHVUQVRGliGqI6ogahLK/Aruensj21i0qIUoQlRFVEFURpYiyvdFPc1QfalEdUYNQdoz0JpUQJYjKiDK9MdLpThnJulPsJOJNShHVENURNQhlh9luUukGJdZ42dGwm1RGlO2NfN6XVax72c5D3aQUUQ1RHVGDUHak5iZle0P1J5WWUvbYn+747OkS8v2XyN9/ifL9l6jffwn9/ku0779E//5LjG+/hJ22eOwlvv/u7t9/d/fvv7v799/d/fvv7v79d3f//ru7f//d3b//7h7ff3eP77+7x/ff3eP77+7x/Xf3+P67e3z/3T2+/+4e3393j++/u9OyTLhGmnANmXCNPOEaZcI16oRr6IRrtAnX6BOuMeE+TxPu8zThPk8T7vM04T5PE+7zNOE+TxPu8zThPk8T7vM04T6XCfe5TLjPZcJ9LhPuc5lwn8uE+1wm3Ocy4T6XCfe5TLjP84T7PE+4z/OE+zxPuM/zhPs8T7jP84T7PE+4z/OE+zxPuM/LhPu8TLjPy4T7vEy4z8uE+7xMuM/LhPu8TLjPy4T7vEy4z+uE+7xOuM/rhPu8TrjP64T7vE64z+uE+7xOuM/rhPu8TrjPdcJ9rhPuc51wn+uE+1wn3Oc64T7XCfe5TrjPdcJ9rhPu8zbhPp+w5y1N2PSWJux6SxO2vaUJ+97ShI1vacLOtzRh61uasPctTdj8libsfksTtr+lCfvf0oQNcGnCDrg0YQtcmrAHLk3YBJcm7IJLE7bBpQn74NKEjXBpwk64NGErXJqwFy5N2AyXJuyGSxO2w6UJ++Fkwn44mbAfTibsh5MJ++FkKROuUSdcQydco024Rp9wjQn3+YT9cDJhP5xM2A8nE/bDyYT9cDJhP5xM2A8nE/bDyYT9cDJhP5xM2A8nE/bDyYT9cDJhP5xM2A8nE/bDyYT9cDJhP5xM2A8nE/bDyYT9cDJhP5xM2A8nE/bDyYT9cDJhP5xM2A8nE/bDyYT9cDJhP5xM2A8nE/bDyYT9cDJhP5xM2A8nE/bDyYT9cPL7+8iun3W0XuP395H9wjV+21c3Xki4XqNMuEadcA2dcI024Rp9wjXG91/j3v1XZy4x7vefpd++H3//WfovXGPC3NUnzF2//yz9F67x29/t1w8CK1+emvvga5QJ16gTrqETrvGAOfjaEVXly+NlH3yN8f3X+P1n6b9wjTThGjLhGhN6rd9/lv4L15jQa40JvdaY0GuNCb3W+P5eKy/LhGukCdeQCdfIE65RJlyjTriGTrhGm3CNPuEaE+7zNOE+TxPu8zThPk8T7vM04T5PE+7zNOE+TxPu8zThPk8T7nOZcJ/LhPtcJtznMuE+lwn3uUy4z2XCfS4T7nOZcJ/LhPs8T7jP8zff57X82VQqlTOWil64NE6Y3c38ApcgJ5DLkCuQq5BTyDXIdchBvwj0i0C/CPSLQL8I9ItAvwj0i0C/CPSLQL9k6JcM/ZKhX/IXfumnw7hSTdXiCuQq5BRyDXIdcoNxZYFcgpxADvqlQL8U6JcC/VKgXwr0S4F+qdAvFfqlQr9U6JcK/VKhXyr0S4V+qdAvFfpFoV8U+kWhXxT6RaFf7DeRpNr7mRvN4Oy3cqSe04nrRS2uwusp5Brj7F0aSetZT1WTS5ATyGXIFcjVm1xLFqeQa5DrkBuMG1/4peiFE4tLkBPIZcgVyFXIKeQa5DrkBuO+OJIk6Tjtu0pNqgkmCgoFMwULBSsFlYKNgp2CtnNabWewZQv8YunuF8BEwcK+7L84m+FXQKVgg+AXC1y/ACYKCgUzBdE4tj+bmuZxosrS99DnRezeThsLx7JfxDY+mlI/z5wi+91ip2K6p2KGp2LsieFp1SRX1YirarKraoqraqqratRVNa5m4uRqKk6u5mJxNReLq7lYXM3F4mouFldzsbiai8XVXCyu5mJxNReLq7k43zcXn6iEKHNuK/lUYsnNojKiCqIqohRR5j1StJ4otX5u2s+eb1KDUPZz55uU6Y0ylhM1kkUJojKiCqIqokzl9wlSi7Kf4N6kTDVUTtOF5mpRhVCKKrSfGNZ80rCWxaIEURlRBVEVUYqohqiOqEEo++SDm9RNbwyLEkTZ3pCze6tJ2d4QuU5VRCmibG+cm4A6xKI6ogah7GfHN6mEKNsb7Zy4HdmiMqIKoiqiFFENUR1Rg1D2c+KbVLpO6WJ5YwiivvDG6SGRJpOyvaHjOlURpYhqpAewnwvfpAahvngmfBtLDBOGZYaBFqyzdEOH6YYO0w0dphs6TDd0mG7oMN3QYbqhw3RDh+mGDtMNHaYbOkw3dJhu6DDd0GG6ocN0Q4fphg7TDR2mGzpMN3SYbugw3dBhuqHDdEOH6YYO0w0dphs6TDd0mG7oMN3QYbqhw3RDh+mGDtMNHaYbOkw3dJhu6DDd0GG6ocN0Q4fphg7TDR2mGzpMN3SYbugw3dBhuqHDdEOH6YYO0w0dphs6TDd0mG7oMN3QYbqhw3RDh+mGDtMNHaYbOkw3dJhu6DDd0GG6ocN0Q4fphg7TDR2mGzpMN3SYbugw3dBhuqHDdEOH6YYO0w0dphs6TDd0mG7oMN3QYbqhw3RDp+mGTtMNnaYbOk03dJpu6DTd0Gm6odN0Q6fphk7TDZ2mGzpNN3Sabug03dBpuqHTdEOn6YZO0w2dphs6TTd0mG5o1VG64aMYP9u4Porxs4vroxhH6Ya1Gj87atdq/OyoXavxs6N2raa4qsbPjtq1Gj87atdqXM3EjtINazWu5mJH6Ya1GldzsaN0w1qNq7nYUbphrcbVXOwo3bBW42oudpRuWKtxNReDdMNKJUTdn25YqYyogqiKKEXU/emGleqIGoQC6YaVuj/dsFKCqIyogqiKqPvTDR8USDes1P1761aqEEpRhSDdsFKCqIyogqiKKEVUQ1RH1CAUSDes1P3phpUSRN2fblgp2xvXEgcrVRGliLo/3bBSHVGDUCDdsFIJUfenG1YqI6ogqiJKEdUQ1RE1CAXSDSt1f7phpQRR96cbVsr2xrXEwUpVRCmi7k83rFRH1CAUSTdsWGKYMCwzDLRgitINHxhKN6xcgpxALkOuQK5CTiHXINchB/0i0C8C/SLQLwL9ItAvAv0i0C8C/SLQLwL9kqFfMvRLhn5B6YaVK5CrkFPINch1yA3GoXTDyiXICeSgXwr0S4F+KdAvBfqlQL8U6JcK/VKhXyr0S4V+qdAvFfqlQr9U6JcK/VKhXxT6RaFfFPpFoV8U+gWlGz44lG5YuQqvp5BrjEPphpVLkBPIZcgVyJF0w8op5BrkOuQG41C6YeUS5ARyGXIFchVyCrkGuQ65wTiWbtjAREGhYKZgoWCloFKwUbBTkKQbthW4hYKJgoV92bN0wwYqBRsEUbphAxMFhYKZgmQch9hrzLIsp8ersoiF2Ub9BS5BTiCXIVcgVyGnkGuQ65CDfhHoF4F+EegXgX4R6BeBfhHoF4F+EegXgX7J0C8Z+iVDv2Tolwz9kqFfMvRLhn7J0C8Z+qVAvxTolwL9UqBfyhd+yRcum9xtv3zeu7py5NnQB1cXyCXICeQy5ArkKuQUcg1yHXLQLwr9otAvCv2i0C8K/aLQLwr9otAvCv2i0C8N+qVBvzTol0bW+leuQK5CTiHXINchNxjXF8glyAnkoF869EuHfunQLx36pUO/dOiXAf0yoF8G9MuAfhnQLwP6ZUC/DOiXAf0yoF++Wuv/BTBRUCiYKVgoSJ5Ab6uEZOF1Ayu9olKwQVDIY+gNTBQUCmYKFgqSZ9EbqBRsFOwUHBDM5IH0BiYKCgUzBQsFKwWVgo2CnYIDgoU8md7AREGhYKZgoWCloFKwUbBTkDyZ3p5rLRRMFCywB6iVgkrBBkFdKEgbJBUKZgqCccxL9vPevbUYNy8YWYtx836RtRg/793bqnHzrqetGjfvetqqcfOup62a4qoaN+962qpx866nrRpXM7Gf9+5t1biai/28d2+rxtVc7Oe9e1s1ruZiP+/d26pxNRf7ee/eVo2rudjPe/e2alzNxfe/d2+jEqLufu/eRmVEFURVRCmi7n7v3kZ1RA1C3f/evY26+717GyWIyogqiKqIuvu9eyt1/3v3Nurut75sVCGUogrvf+/eRgmiMqIKoiqiFFENUR1Rg1D3v3dvo+5+795GCaLufu/eRtneuPIuvI2qiFJE3f3evY3qiBqEuv+9exuVEHX3e/c2KiOqIKoiShHVENURNQh1/3v3Nuru9+5tlCDq7vfubZTtjSvvwtuoiihF1N3v3duojqhBKPDevR9YYpgwLDMMtGCFvHdvxch79zYuQU4glyFXIFchp5BrkOuQg34R6BeBfhHoF4F+EegXgX4R6BeBfhHoF4F+ydAvGfolQ7+Q9+5tXIFchZxCrkGuQ24wjrx3b+MS5ARy0C8F+qVAvxTolwL9UqBfCvRLhX6p0C8V+qVCv1Tolwr9UqFfKvRLhX6p0C8K/aLQLwr9otAvCv1C3ru3cuS9extX4fUUco1x5L17G5cgJ5DLkCuQA1mHjVPINch1yA3GkffubVyCnEAuQ65ArkJOIdcg1yE3GIfeu/cDTBQUCmYKFgpWCioFGwU7BUG64ccK3ELBRMHCvuzRe/d+gErBBkHy3r0fYKKgUDBTkIyjJEfpho9i/Gzj+ijGzy6uj2IcpRvWavzsqF2r8bOjdq3Gz47atZriqho/O2rXavzsqF2rcTUTO0o3rNW4mosdpRvWalzNxY7SDWs1ruZiR+mGtRpXc7GjdMNajau52FG6Ya3G1VwM0g0rlRB1f7phpTKiCqIqohRR96cbVqojahAKpBtW6v50w0oJojKiCqIqou5PN3xQIN2wUvfvrVupQihFFYJ0w0oJojKiCqIqohRRDVEdUYNQIN2wUvenG1ZKEHV/umGlbG9cSxysVEWUIur+dMNKdUQNQoF0w0olRN2fblipjKiCqIooRVRDVEfUIBRIN6zU/emGlRJE3Z9uWCnbG9cSBytVEaWIuj/dsFIdUYNQJN2wYYlhwrDMMNCCCUo3iLB0gwhLN4iwdIMISzeIsHSDCEs3iLB0gwhLN4iwdIMISzeIsHSDCEs3iLB0gwhLN4iwdIMISzeIsHSDCEs3iLB0gwhLN4iwdIMISzeIsHSDCEs3iLB0gwhLN4iwdIMISzeIsHSDCEs3iLB0gwhLN4iwdIMISzeIsHSDCEs3rBz0S4F+KdAvBfqlQr9U6JcK/VKhXyr0S4V+qdAvFfqlQr9U6BeFflHoF4V+UegXhX5B6QYRlm4QYekGEZZuEGHpBhGWbhBh6QYRlm4QYekGEZZuEGHpBhGWbhBh6QYRlm4QYekGEZZuEGHpBhGWbhBh6QYRlm4QYekGEZZuEGHpBhGWbhBh6QYRmG4QgekGEZhuEIHpBhGYbtjASkGlYKNgpyBJN2wrcAsFEwUL+7Jn6QYRmG4QgekGEZhuEIHpBhGYbhCB6QYRmG7I/c/gFOcVSwvkEuQEchlyBXIVcgq5BrkOOegXgX4R6BeBfhHoF4F+EegXgX4R6BeBfhHolwz9kqFfMvRLhn7J0C8Z+iVDv2Tolwz9kqFfCvRLgX4p0C8F+qV84Zd84bLJ3fbL572rK0eeDX1wdYFcgpxALkOuQK5CTiHXINchB/2i0C8K/aLQLwr9otAvCv2i0C8K/aLQLwr90qBfGvRLg35pZK1/5QrkKuQUcg1yHXKDcX2BXIKcQA76pUO/dOiXDv3SoV869EuHfhnQLwP6ZUC/DOiXAf0yoF8G9MuAfhnQLwP65au1/l8AEwWFgpmChYLkCfS2SkgWXjew0isqBRsEhTyG3sBEQaFgpmChIHkWvYFKwUbBTsEBwUweSG9goqBQMFOwULBSUCnYKNgpOCBYyJPpDUwUFApmChYKVgoqBRsFOwXJk+ntudZCwUTBAnuAWimoFGwQ1IWCtEFSoWCmIBnHytJPFaafKkw/VZh+qjD9VGH6qcL0U4XppwrTTxWmnypMP1WYfqow/VRh+qnC9FOF6acK008Vpp8qTD9VmH6qMP1UYfqpwvRThemnCtNPFaafKkw/VZh+qjD9VGH6qcL0U4XppwrTTxWmnypMP1WYfqow/VRh+qnC9FOF6acK008Vpp8qTD9VmH6qMP1UYfqpwvRThemnCtNPFaafKkw/VZh+qjD9VGH6qcL0U4XppwrTTxWmnypMP1WYfqow/VRh+qnC9FOF6acK008Vpp8qTD9VmH6qMP1UYfqpwvRThemnCtNPFaafKkw/VZh+qjD9VGH6qcL0U4XppwrTT5WmnypNP1Wafqo0/VRp+qnS9FOl6adK00+Vpp8qTT9Vmn6qNP1Uafqp0vRTpemnStNPlaafKk0/VZp+qjT9VGn6qVZHZ7t8FOPnJdYfxfh5h/VHMY7Odlmr8XOewFqNn/ME1mr8nCewVlNcVePnPIG1Gj/nCazVuJqJHZ3tslbjai52dLbLWo2rudjR2S5rNa7mYkdnu6zVuJqLHZ3tslbjai52dLbLWo2ruRic7bJSCVH3n+2yUhlRBVEVUYqo+892WamOqEEocLbLSt1/tstKCaIyogqiKqLuP9vlgwJnu6zU/W8WX6lCKEUVgrNdVkoQlRFVEFURpYhqiOqIGoQCZ7us1P1nu6yUIOr+s11WyvbGtfNWVqoiShF1/9kuK9URNQgFznZZqYSo+892WamMqIKoiihFVENUR9QgFDjbZaXuP9tlpQRR95/tslK2N66dt7JSFVGKqPvPdlmpjqhBKHK2y4YlhgnDMsNAC6Ys3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aAw3aA03aA03aA03aA03aA03aA03aA03aA03aA03aA03aA03aA03aA03aA03aA03aA03aA03aA03aA03aA03aAw3dCyo3TDRzF+tnF9FONnF9dHMY7SDWs1fnbUrtX42VG7VuNnR+1aTXFVjZ8dtWs1fnbUrtW4mokdpRvWalzNxY7SDWs1ruZiR+mGtRpXc7GjdMNajau52FG6Ya3G1VzsKN2wVuNqLgbphpVKiLo/3bBSGVEFURVRiqj70w0r1RE1CAXSDSt1f7phpQRRGVEFURVR96cbPiiQblip+/fWrVQhlKIKQbphpQRRGVEFURVRiqiGqI6oQSiQblip+9MNKyWIuj/dsFK2N64lDlaqIkoRdX+6YaU6ogahQLphpRKi7k83rFRGVEFURZQiqiGqI2oQCqQbVur+dMNKCaLuTzeslO2Na4mDlaqIUkTdn25YqY6oQSiSbtiwxDBhWGYYaMEKSjd8YCjdsHIJcgK5DLkCuQo5hVyDXIcc9ItAvwj0i0C/CPSLQL8I9ItAvwj0i0C/CPRLhn7J0C8Z+gWlG1auQK5CTiHXINchNxiH0g0rlyAnkIN+KdAvBfqlQL8U6JcC/VKgXyr0S4V+qdAvFfqlQr9U6JcK/VKhXyr0S4V+UegXhX5R6BeFflHoF5Ru+OBQumHlKryeQq4xDqUbVi5BTiCXIVcgR9INK6eQa5DrkBuMQ+mGlUuQE8hlyBXIVcgp5BrkOuQG41i6YQMTBYWCmYKFgpWCSsFGwU5Bkm7YVuAWCiYKFvZlz9ING6gUbBBE6YYNTBQUCmYKknEci73GLMtyerwqi1iYbdRf4BLkBHIZcgVyFXIKuQa5DjnoF4F+EegXgX4R6BeBfhHoF4F+EegXgX4R6JcM/ZKhXzL0S4Z+ydAvGfolQ79k6JcM/ZKhXwr0S4F+KdAvBfqlfOGXfOGyyd32y+e9qytHng19cHWBXIKcQC5DrkCuQk4h1yDXIQf9otAvCv2i0C8K/aLQLwr9otAvCv2i0C8K/dKgXxr0S4N+aWStf+UK5CrkFHINch1yg3F9gVyCnEAO+qVDv3Tolw790qFfOvRLh34Z0C8D+mVAvwzolwH9MqBfBvTLgH4Z0C8D+uWrtf5fABMFhYKZgoWC5An0tkpIFl43sNIrKgUbBIU8ht7AREGhYKZgoSB5Fr2BSsFGwU7BAcFMHkhvYKKgUDBTsFCwUlAp2CjYKTggWMiT6Q1MFBQKZgoWClYKKgUbBTsFyZPp7bnWQsFEwQJ7gFopqBRsENSFgrRBUqFgpiAYx7IkP+/dW4tx84KRtRg37xdZi/Hz3r2tGjfvetqqcfOup60aN+962qoprqpx866nrRo373raqnE1E/t5795Wjau52M9797ZqXM3Fft67t1Xjai728969rRpXc7Gf9+5t1biai/28d2+rxtVcfP979zYqIeru9+5tVEZUQVRFlCLq7vfubVRH1CDU/e/d26i737u3UYKojKiCqIqou9+7t1L3v3dvo+5+68tGFUIpqvD+9+5tlCAqI6ogqiJKEdUQ1RE1CHX/e/c26u737m2UIOru9+5tlO2NK+/C26iKKEXU3e/d26iOqEGo+9+7t1EJUXe/d2+jMqIKoiqiFFENUR1Rg1D3v3dvo+5+795GCaLufu/eRtneuPIuvI2qiFJE3f3evY3qiBqEAu/d+4ElhgnDMsNACybkvXsrRt67t3EJcgK5DLkCuQo5hVyDXIcc9ItAvwj0i0C/CPSLQL8I9ItAvwj0i0C/CPRLhn7J0C8Z+oW8d2/jCuQq5BRyDXIdcoNx5L17G5cgJ5CDfinQLwX6pUC/FOiXAv1SoF8q9EuFfqnQLxX6pUK/VOiXCv1SoV8q9EuFflHoF4V+UegXhX5R6Bfy3r2VI+/d27gKr6eQa4wj793buAQ5gVyGXIEcyDpsnEKuQa5DbjCOvHdv4xLkBHIZcgVyFXIKuQa5DrnBOPTevR9goqBQMFOwULBSUCnYKNgpCNINP1bgFgomChb2ZY/eu/cDVAo2CJL37v0AEwWFgpmCZBzTcJRu+CjGzzauj2L87OL6KMZRumGtxs+O2rUaPztq12r87KhdqymuqvGzo3atxs+O2rUaVzOxo3TDWo2rudhRumGtxtVc7CjdsFbjai52lG5Yq3E1FztKN6zVuJqLHaUb1mpczcUg3bBSCVH3pxtWKiOqIKoiShF1f7phpTqiBqFAumGl7k83rJQgKiOqIKoi6v50wwcF0g0rdf/eupUqhFJUIUg3rJQgKiOqIKoiShHVENURNQgF0g0rdX+6YaUEUfenG1bK9sa1xMFKVUQpou5PN6xUR9QgFEg3rFRC1P3phpXKiCqIqohSRDVEdUQNQoF0w0rdn25YKUHU/emGlbK9cS1xsFIVUYqo+9MNK9URNQhF0g0blhgmDMsMu78FkwWlG2Rh6QZZWLpBFpZukIWlG2Rh6QZZWLpBFpZukIWlG2Rh6QZZWLpBFpZukIWlG2Rh6QZZWLpBFpZukIWlG2Rh6QZZWLpBFpZukIWlG2Rh6QZZWLpBFpZukIWlG2Rh6QZZWLpBFpZukIWlG2Rh6QZZWLpBFpZukIWlG2Rh6QZZWLpBFpZukIWlG1YO+qVAvxTolwL9UqFfKvRLhX6p0C8V+qVCv1Tolwr9UqFfKvSLQr8o9ItCvyj0i0K/oHSDLCzdIAtLN8jC0g2ysHSDLCzdIAtLN8jC0g2ysHSDLCzdIAtLN8jC0g2ysHSDLCzdIAtLN8jC0g2ysHSDLCzdIAtLN8jC0g2ysHSDLCzdIAtLN8jC0g2ysHSDLDDdIAtMN8gC0w2ywHSDLDDdsIGVgkrBRsFOQZJu2FbgFgomChb2Zc/SDbLAdIMsMN0gC0w3yALTDbLAdIMsMN0gC0w3ZP0zOMV5xdICuQQ5gVyGXIFchZxCrkGuQw76RaBfBPpFoF8E+kWgXwT6RaBfBPpFoF8E+iVDv2Tolwz9kqFfMvRLhn7J0C8Z+iVDv2TolwL9UqBfCvRLgX4pX/glX7hscrf98nnv6sqRZ0MfXF0glyAnkMuQK5CrkFPINch1yEG/KPSLQr8o9ItCvyj0i0K/KPSLQr8o9ItCvzTolwb90qBfGlnrX7kCuQo5hVyDXIfcYFxfIJcgJ5CDfunQLx36pUO/dOiXDv3SoV8G9MuAfhnQLwP6ZUC/DOiXAf0yoF8G9MuAfvlqrf8XwERBoWCmYKEgeQK9rRKShdcNrPSKSsEGQSGPoTcwUVAomClYKEieRW+gUrBRsFNwQDCTB9IbmCgoFMwULBSsFFQKNgp2Cg4IFvJkegMTBYWCmYKFgpWCSsFGwU5B8mR6e661UDBRsMAeoFYKKgUbBHWhIG2QVCiYKQjGsbf2VWwjL+evx7xbeunlzFXImaPfx/ldHEktqiGq36AkWdQglN0t3KQSouR+qn/1op3UTg7JaVwC5VXOnEKuQa5Dbtx05C7sfdHliz7vNpfIHdC/Ctrc5jLkCuQq5BRyDXKdcOPP5p93+WrfBXx73Ziev9qQ087elLaL0Jd+5hLk7Hh1Ov1p+3h1a2cqI6rcT7WvXolXTr/L87i8wqgvJ+qLV9fdohKiBFH5bmp8dVR7zScN6+4HQ81nShFlh83Pz6r7svsWuFD2d+KSz1SxqHE/JfffYUPZHTaU3WFDyR02lNxhQ8EdNpYF3GErdf8dtlEJUYKofD9VwB22UYqou++wjbr7DtuoO++wj//4v3/5t3/6y//453/89w9g/d/+z1//59/+6V/++vM///b//vXH//Kf/x8="},{"name":"turn","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"address_note::aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"address_note::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"address_note::aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"game_id","type":{"kind":"field"},"visibility":"private"},{"name":"guess","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"game_id":[{"start":33,"end":34}],"guess":[{"start":34,"end":35}],"inputs":[{"start":0,"end":33}]},"return_type":{"abi_type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash_read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"address_note::aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"address_note::aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"address_note::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[7440,7441,7442,7443,7444,7445,7446,7447,7448,7449,7450,7451,7452,7453,7454,7455,7456,7457,7458,7459,7460,7461,7462,7463,7464,7465,7466,7467,7468,7469,7470,7471,7472,7473,7474,7475,7476,7477,7478,7479,7480,7481,7482,7483,7484,7485,7486,7487,7488,7489,7490,7491,7492,7493,7494,7495,7496,7497,7498,7499,7500,7501,7502,7503,7504,7505,7506,7507,7508,7509,7510,7511,7512,7513,7514,7515,7516,7517,7518,7519,7520,7521,7522,7523,7524,7525,7526,7527,7528,7529,7530,7531,7532,7533,7534,7535,7536,7537,7538,7539,7540,7541,7542,7543,7544,7545,7546,7547,7548,7549,7550,7551,7552,7553,7554,7555,7556,7557,7558,7559,7560,7561,7562,7563,7564,7565,7566,7567,7568,7569,7570,7571,7572,7573,7574,7575,7576,7577,7578,7579,7580,7581,7582,7583,7584,7585,7586,7587,7588,7589,7590,7591,7592,7593,7594,7595,7596,7597,7598,7599,7600,7601,7602,7603,7604,7605,7606,7607,7608,7609,7610,7611,7612,7613,7614,7615,7616,7617,7618,7619,7620,7621,7622,7623,7624,7625,7626,7627,7628,7629,7630,7631,7632,7633,7634,7635,7636,7637,7638,7639,7640,7641,7642,7643,7644,7645,7646,7647,7648,7649]},"bytecode":"","debug_symbols":"7L3fjiu/tp33LvvaCIrk5D+/SpALI3EAA4YdxL4z8u6p1awq6ZzuTR2e1pI4+Mk3tjf40xpjSs05qBK/+b/+8V//+//5n/7nf/nv/+1//OM//q9/uO0f//F//1//+B//z3/6b3/+v//jf/6n//d//uM/bv/hH//5v/1f+//9//2Hf/zf/+W//ud//Me4/z+/LXOxHgtdcddS539a6105F3tv6Vrtnf2wOofgjtU51PgvVv8f/+Efzkmq9q9SHXw4VYcSfqk6/EJ1dKkcK6PfyrU4u58sbps/PW7+ZtJv/ofVVv31yvlubf0SbYqio6Lo9AvR2eL5yau3Py63pR81+3RqdsE/WB1cOF86+Fh/+SeQf+GxXKUuMTzyuGs9PYZc7lbHn96XfIqOf1zdrf2juQhqrnqa/Sao2Qlq9oKag6BmE9QcBTUnQc2CfdBP2gfDLa2lb5on7YM9zWHOPpi2fCxO0X3TPGcfzClfqTg+WBu9ne9JuKVcZz+lXOcsXwk6pX+x+k815uyw76rGnL37XdUwWDWuluLc/Ssf1Zgzb7yrGnMmmXdVY86M9Neq4bfTm/N++1aNOdPXu6oxZ657UzVszsT4FztsulXDfavGAlm0nC+c7r+ffVgNV26ntrB9FWOBKPq8YsyZRGs4JdRqD/9OzodXMd4KF8JPItLVXctNgm+VsE8ljkrMmUDfUYk50+c7KjFn8nxHJeZMne+oxJyJ8w2ViHOmzXdUYs6k+Y5KzBkz31GJT8Y8K2GfShyV+GTMsxKfjHlW4pMxz0p8MuZZiU/GPCqRPhnzrMQnY56V+GTMsxKfjHlWwj6VOCrxyZhnJT4Z86zEJ2OelfhkzLMSn4x5VCJ/MuZZiU/GPCvxyZhnJT4Z86yEfSpxVOKTMc9KfDLmWYlPxjwr8cmYZyU+GfOoRPlkzLMSn4x5VuKTMc9K6GfM7M7fm2Zf7ivxx56tbU8/DRZ/fjhL9g8+x91fFhf9PPi8WugnwufVQj8TPq8W+qnwabWo+rnwebXQT4bPq4V+NuxFhqof+J73VtunFlctPlHyVotPlLzV4hMlb7X4RMlbLT5R8qqF2/SzZC8zuO2TD+/ebP2A+MRifOLkXTHsU4xbMT6B8q4Yn0R5V4xPpLwrhn6m7EeHT068vdnu853jXTE+ofKuGJ9QeVeMT6i8K4Z9inErxidU3hVDP1R2o8Okkyre9GZ/vnu8K8YnVN6KMenQjjcV4xMq74rxCZV3xfiEyrti2NrRYdIhKm96sz9fPt4V4xMq74rxCZV3xfiEylsxJp2A86ZifELlXTHW/n2km3RWzpvebPsU41aMT6i8K8YnVN4V4xMq74rxCZV3xfiEylsxJh2S87ToMOnYmze92Z8vH++K8QmVd8WwTzFuxfiEyrtifELlXTE+ofKuGIv/THKB2TbPe7MXGG/zxGJ8QuVdMT6h8q4Yn1B5Vwz7FONWjE+ovCvG4j+TXGCMzRPf7M+Xj3fF+ITKWzEWmGfzxGJ8QuVdMT6h8q4Yn1B5VwxbOzosMLHmiW/258vHu2J8QuVdMT6h8q4Yn1B5K8YCA2yeWIxPqLwrxuI/k1xgOM0T32z7FONWjE+ovCvGJ1TeFeMTKu+K8QmVd8X4hMpbMRaYWNONDgvMoXnim/358vGuGJ9QeVcM+xTjVoxPqLwrxidU3hXjEyrvirH4zyQ/A2zu3uzPBJv7YnxC5V0xPqHyrhifUHlXDPsU41aMT6i8K8biP5P8DLK5f7M/Xz7eFeMTKq9i+AVG2TyxGJ9QeVeMT6i8K8YnVN4Vw5aODv4zyub+zf58+XhXjE+ovCvGJ1TeFeMTKm/F+My9uS/GJ1TeFWPtn0n6zyib+zfbPsW4FeMTKu+K8QmVd8X4hMq7YnxC5V0xPqHyVowF5t50o8NnlM39m/358vGuGJ9QeVcM+xTjVoxPqLwrxidU3hXjEyrvirH2zyT9Z5TN3Zv9GWVzX4xPqLwrxidU3hXjEyrvimGfYtyK8QmVd8VY+2eS/jPK5v7N/nz5eFeMT6i8FWOBUTZPLMYnVN4V4xMq74rxCZV3xbApi1Fy+SfF+BL9Y/jbH77k4z/av432fenVnWpquhPjfiphDuEsdw41Xqu9syYnzSUn/1qO2yxcH5pteyDo3/hpSdd7mu5UO3e8p0VSdVVU/fMsk+lVu8eq6yPV27UJbeGHf8L//p9wLl+FsfIv/onvq0M+d1Bztx20uKbmx0a1f11WTzXhbtv9UU1w7vwHgsv3hvOPq8v5BoT9+9rbS+emxybTEyfTkybTkyfTUybTU+fS8/M0gDfqcZPp8ZPpmWx/TpPtz2my/TlNtj+nyfbnNNn+nCbbn/Nk+3OebH/Ok+3PebL9OU+2P+fJ9uc82f6cJ9uf82T7c55sfy6T7c9lsv25TLY/l8n25zLZ/lwm25/LZPtzmWx/LpPtz2Wy/blOtj/XyfbnOtn+XCfbn+tk+3OdbH+uk+3PdbL9uU62P9e59uewzbU/h22u/Tlsc+3PYZtrfw7bXPtz2Oban8M21/4ctrn257DNtT+HbbL92U22P7vJ9mc32f7sJtuf3WT7s5tsf3aT7c9usv3ZvXx/ju785ViIu4g7Pd8X50tGTuGb9Cor3W+60t3U0vP5Q73i/DfpL+8lZbNzdbHQl74/2jxfen9q5m6L6w+LSz5/qVm32F/qgr9+LB7ufoj853eM3+vX/x1y8GGZEtZ0lWVzqb/2YVni3GW5/ir253t2b/VLfFIWn5XF16nFl3ou3r/Gtge7jKvXn5MPec7dK2zMej9zqwtunRp6s+uz9eiDaFeMjma/LOHUTTQEu1465PqghFavKyMxxBX2CPu8Oa/dUKbOTn+x4O/afaaOe2P1jtdiF2voL07pOtX6+MsSzh06JXpg+ZTwtyWc+/TwrrO4zR3y31aWuXP728qyzneCTy3Lq48ottl5i9vcVvplKSldkIpUbxfQs2viTVl8VBafphYfc73E32XAU3wWFh/nfizTe6IUva70oCvddKVHXelJ9ulpnPxJi8DT0zj3ofddYTNNfmLrPsNLk5+r+uInP/30xRvzad67dq80948cJJ6eprl/a6HwtWeauonCn56mqb+TXvDpaZ46O6339DRPHfcknp7muUOnQg/Mc/8MV6KE9jmL/1SWyX/J/K6yTP4b6XeVZZ3vBJ9aliL6JOn74ngR/qPd8kRoNivC5ssRZG+y6Rg2PcPm3D/geJpNW8fm9Q1C2uxf25z7RyFPs6n685FBm6o/NBm0uVAK6tlcKAV1bNaFUlDP5kIpqGdzoRTUs7lQCurZNIZNRgqqjBRUGSmoMlJQRaQg2xApyDZECrINkYJsQ6Sg/R9l2ESkINsQKcg2RAqyDZGCbFsnBSV/ykh3v8VqNt06Kahrc50U1LU5dwrq3jg1J3xR2V4O732q+JfnEOfDJT78i6tsX3rSZHryZHpUW/CXeNXG+ke8V22XX+JVm+CXeNUD/pd41WP7l/i5W9sD8apH7C/xwgwO88IMDvPKHdYrd9ig3GGDcocNyh02KHfYl4NqnypeucMG5Q4blDtsUO6wQbnDmnKHNeUOa8oddnKO5APxyh12co5kX3xSrnySrrxytknK2SYpZ5uknG2ycrbJytkmK2ebrJxtXo6/eKp45Q6blTtsVu6wsliGL/HKHVYWofAlXrnDyuIOvsQrd1hZNMGXeOUOK4sR+BKv3GFlr/x/iVfusLLX87/EK3dY2av0X+KVO6zstfcv8codVvaK+pd45Q4re538S7xwh42yV7+/xAt32Ch7TftLvHCHjZtwh42yF6W/xAt32Ch7qflLvHCHjbIXkP+Il71W/CVeucNOfgX4gXjlDjv5FeAH4pU7rFPusE65wyrfRI7KN5Hjy59JPW1ybiyyQ39jmXvob1d61pVedKXXqaV3pkTHOvks3/mnRMc6+UTh9wzViXXumWfdWcXx5Y+qnip+8plgffFzj6habUp0rHPPuFeYEh3r1FN0FcY7pm2hOa2rTYlO29QTYNebEp22qbPTclOi02br1Ps9U6LTNnfolOiBcw+tlSjhZ8Dtj2WZO+S/rSxz5/Z3lcWt853gU8uCGLibZH9bMGgTMXA3yf5eYdDmQkNWejYXGrLSs7nQkJWezYWGrPRsLjRqrmNTlhr/g81/PjInyfLlB20iRs0lWWb9oE1j2ESMmkuyxPxBm4hRc0mWwj9oEzFwN8mS/QdtMlKQ7LSAQZuMFCQ7gWDQJiMFyU41GLTJSEGykxIGbTJSkOz0hUGbjBQkO9Fh0CYjBclOiRi0yUhBxkhBxkhBxkhBxkhBkZGCIiMFRUYKiowUFI1hk5GCIiMFRUYKiowUFBkpKDFSUGKkoMRIQYmRgmTnVg7aZKQg2VmYgzYZKUh2vuagTUYKkp3ZOWiTkYJk54AO2mSkINnZooM2GSlIdl7poE1GCpKdgTpok5GCZOeqDtpkpCDZWa2DNhkpSHb+66BNRgqSnSk7aJORgmTn1A7aZKQg2dm3gzYZKUh2nu6gTUYKkp3RO2iTkYJk5/4O2mSkINlZwoM2ESkoy84nHrSJSEFZdubxoE1ECsqbMWwiUlCWnc08aBORgrLsvOdBm4wUJDtDetDmOiko+VNGuhvncdhcJwV1ba6Tgro2bWqbKfnLZt3ubX6JnzvbPBA/d2J5IP7lOcT5cIm/H9OUm54ymZ46l57Xg4sf6FHtlV/iVTvgl3jVvvYlfu5u9UC86kn8S7zq+fpLvOqp+Uu86ln4S7zqCfePeFnO7Zd45Q4ry6T9Eq/cYWX5sV/ilTusLOv1S7xyh5Xlsn6JV+6wsgzVL/HKHVaWd/olXrnDyrJJv8Qrd1hZjuiXeOUOK8v8/CNelsXxJV668srZRpaG8SVeOdvIkiu+xCtnG1nKxJd45WwjS4T4Eq/cYWXpDV/ilTusLGnhS7xyh5WlInyJV+6wsgSDL/HKHVaWNvAlXrnDypIBvsQrd1jZW/xf4pU7rOyN+y/xyh1W9nb8l3jlDit7k/1LvHKHlb11/iVeuMMW2RviX+KFO2yRvc39JV64w5ZNuMMW2fvUX+KFO2yRvfv8JV64wxbZe8p/xMvePv4Sr9xhZW8Kf4lX7rCT3+p9IF65w05+q/eBeOUO65Q7rFPusF65wyrfRC7KN5GL8k3kshCtuoMHKWUujkF5+QOpEN12ro4x98ueLxk5hW/Sna50rys96Eo3Xelxauk5n5uj89+kvzrAh/370HN1sdCX7nM4X9rn5G6L609dIJ9bad1if6kL/gSbuZBu3cXKT/ULwZ3vfai3V/bOWgnzMiWs6SrL5lJ/7cOy1LnLcv1V+P0Z+L3VXXx9+XOqp4p3yuLD1OL3NnXqqN4e7DLuwifuMS9PuXvVzZj1fuJWV1/+kOwv1tCbXZ+tRx9EK+VYG81+WcKpm2gIdr10yPVBCa2ef8ouhrjCHlE+b85rN5Sps9NfLPibdh83ddwbq3e8FrtYQ39xStep1sdflnDu0KnQA1/+AHnBEs59enjTWby+/AG5SFnmzu1vK8s63wk+tSwLDSPx8dpxb3kiNJsLDSPp2VxoGEnHpuyPFQZtLjSSrWdzoZFsPZsLjWTr2TSGzYVGsvVsIkayVVm4/KBNxEi2KgusH7Mpi7YftIkYTFtlcfmDNhGDaassgn/QJmIwbZXF+g/aZKQg2VEBgzYZKUh2/MCgTUYKkh1pMGiTkYJkxyQM2mSkINnRC4M2GSlIdpzDoE1GCoqMFBQZKSgyUlBkpKBoDJuMFBQZKSgyUlBkpKDISEGJkYISIwUlRgpKjBSUjGGTkYISIwXJjo0ctMlIQbKjKMdsyg6tHLTJSEGygzAHbTJSkOxwzUGbjBQkO7Bz0CYjBckOAR20yUhBsoNFB20yUpDssNJBm4wUJDsAddAmIwXJDlUdtMlIQQtBsbs2GSlIdvjroE1GCpIdKDtok5GCZIfUDtpkpCDZwbeDNhkpSHaY7qBNRApym+yE3lGfiBy0+0QEod0nIgntPg3iE5GFdp+IMLT7RKSh3SciDu0+IXlIdp7yqE9IHpKd0jzqE5KHZGc/j/qE5CHZidKjPiF5aCWcdNcnJA+tBJTu+oTkoZWQ0l2fkDy0ElS66xOShxhY6d0nJA8xwNK7T0geYqCld5+QPMSAS+8+IXmIgZfefULyEAMwvfuE5CEGYnr3CclDDMj07hOShxiY6d0nJA8xQNO7T0geYqCmd5+QPMSATe8+IXmIgZvefULyEAM4vfuE5CEGcnr3CclDDOj07hOShxjY6d0nJA8xwNO7T0geYqCnd5+QPMSAT+8+IXmIgZ/efULyEANAvfuE5CEGgnr3CclDDAj17hOShxgY6t0nJA8xQNS7T0geYqCod5+QPMSAUe//ECQPMXDU+z8EyUMMIPX+D0HyEANJvf9DkDzEgFLv/xAkDzGw1LtPSB5igKl3n5A8xEBT7z4heYgBp959QvIQA0+9+2TkIQfhUzsIn9pB+NQOwqd2m0F8MvKQg/CpHYRP7SB8agfhUzsIn9pB+NQOwqd2ED61g/CpHYRP7SB8agfhUzsIn9pB+NQOwqd2ED61g/CpHYRP7SB8agfhUzsIn9pB+NQOwqd2ED61g/CpHYRP7SB8agfhUzsIn9pB+NQOwqd2ED61g/CpHYRP7SB8arcQnzr5U0YK8ZvPdfJQ3+c6eajv06b2mZK/fNbt3mdTP3fKeaR+7uzySP3LE8n+pe2lPuR79U1QmU1QnUzQ6+HIjwS52QSptremXrVpNfVzt6JH6lUP3E296jG6qVc9HDf1qkfepl71IPulXhaP29SrHjqbeuleKwuobeqle60sTLapl+61suDXpl6618pCWr/Uy6JXm3rpXiuLSW3qpXutLNK0qZfutbL40aZeutfKokKbeuleK4vhaOqVa+9lkRlNvXLO8bJ4i6ZeOef4zaTVK+ccL4uNaOqVc46XRTw09dK9VhbH0NRL91pZdEJTL91rZTEHTb10r5VFEjT10r1WFh/Q1Ev3Wtmr/k29dK+VvZbf1Ev3Wtkr9E29dK+Vve7e1Ev3Wtmr6U29dK+VvUbe1Ev3Wtkr3029dK+VvZ7d1Ev3Wtmr1E29dK+Vvfbc1Ev3Wtkryk29dK+VvU7c1Ev32smv/j5SL91rJ7/6+0i9dK816V5r0r02SvfaKN1rpe82e+m7zV76bnNYCGbdg6EEPxkfIbz8oVWIbjtXx5j7hc+XjJzCd+1eWHsQ1m7C2qOw9jS19pzPPdL579pfHehD2excXSz0tfsczpf2Obnb4vpTN8jnjlq32F/65z071rqQbl3Gyk8FDMGd736ot1f2zo4almVqWNNVl82l/tqHdXn5o6zBulx/GD5Xu/fa1Dtp9V5avU2tvtRzsa/eHmw17oJH/nlUMekW9vLnV5MU/Ln7XVqniPt3xNen69FH0Uo51kaz39Zw6l66b0zXS4dcH9TQ6vnX7GKIS2wT9fPuvHZPsakz1F+s+Ls2IJs69o0VPF6LXayhvzil64jr429rOHf4lGiEL3/CvGIN7XMw/7Euc6f999Vl7gD/vrqs8yXhc+uy0MgSH69t9xYrjqdjsr88GPQp+xuFUZ8LjXDr+lxohFvX50Ij3Lo+DeJzoRFuXZ8LjXDr+mSMcAuyPPtRn4wRbkGWkT/qkzHSNshy90d9MkbaBlmW/6hPxkjbIDsfYNQnJA/JzhwY9QnJQ7JzDEZ9QvKQ7GyEUZ+QPCQ7b2HUJyQPyc5wGPUJyUOycyFGfULyUIHkoQLJQwWShwokDxWD+ITkoQLJQwWShwokDxVIHqqQPFQheahC8lCF5KFqEJ+QPFQheahC8pDs7MpRn4w8ZLLzMEd9MvKQyc7YHPXJyEP7vwrxychDJjsLdNQnIw+Z7HzRUZ+QPCQ7s3TUJyQPyc5BHfUJyUOys1VHfULykOy81lGfkDwkOwN21CckD8nOlR31CclDsrNqR31C8pDs/NtRn5A8JDtTd9QnJA/Jzukd9QnJQ7Kzf0d9QvKQ7DzhUZ+QPCQ7o3jUJyQPyc49HvUJyUOys5RHfULykOx85lGfkDwkO/N51CckD8nOkR71CclDsrOpR31C8tBKfOquT0geWolP3fUJyUMr8am7PiF5aCU+ddcnJA+txKfu+oTkIQif2iB8aoPwqQ3CpzYIn9ogfGqD8KkNwqc2CJ/aIHxqg/CpDcKnNgif2iB8aoPwqQ3CpzYIn9ogfGqD8KkNwqc2CJ/aIHxqg/CpDcKnNgif2iB8aoPwqQ3CpzYIn9ogfGqD8KkNwqc2CJ/aIHxqg/CpDcKnNgif2iB8aoPwqQ3CpzYIn9ogfOoI4VNHCJ86QvjUEcKnjptBfDLyUITwqSOETx0hfOoI4VNHCJ86QvjUEcKnjhA+dYTwqSOETx0hfOoI4VNHCJ86QvjUEcKnjhA+dYTwqSOETx0hfOoI4VNHCJ86QvjUEcKnjhA+dYTwqSOETx0hfOoI4VNHCJ86QvjUEcKnjhA+dYTwqSOETx0hfOoI4VNHCJ86QvjUEcKnjhA+dYTwqSOETx0hfOoI4VNHCJ86QvjUEcKnjhA+dYTwqSOETx0hfOoI4VNHCJ86QvjUEcKnjhA+dYTwqSOETx0hfOoI4VNHCJ86QvjUEcKnjhA+dYTwqSOETx0X4lMnf8pIIX7zuU4e6vs0iM+581BK/vJZt3ufTf3cKeeR+rmzyyP1L08kzodLfcj36pugOpmg1zOXHwlyswnyswlSbW9NvWrTaupVj+ZNveqBu6lXPUY39aqH46Ze9cj7pV4WpNvUqx5Pm3rVQ2dTL91rZQG1Tb10r5WFyTb10r1WFvza1Cv32iQLaW3qlXttkgWqNvXKvXb/ul1avXKvTbKg0qZeudcmWahoUy/da2UBoF/qZTEcX+pl4RpNvXTOkQVhNPXSOUcWWtHUS+ccWcBEUy+dc2RhEE29dK+VBTc09dK9Vhay0NRL91pZIEJTL91rZeEFTb10r5UFDTT10r1WFgrQ1Ev3WtkL/E29dK+VvWzf1Ev3WtmL8U29dK+VvcTe1Ev3WtkL5029dK+VvRze1Ev3WtmL3E29dK+VvXTd1Ev3WtkL0k29dK+Vvczc1Ev3WtmLx029dK+VvSTc1Ev32smv/j5SL91rs3SvzdK9tkj32iLda4t0r5W+25yk7zYn6bvNeSGYdQ+GkuNkfIT88odWIbrtXB1j7hc+XzJyCt+1B2HtJqw9CmtPwtrz1NpzPvdI579rf3WgD2Wzc3Wx0Nfuczhf2ufkbovrT90gnztq3WJ/qQv+JLq5kG5dxspPBQzBne9+qLdX9s6OGtZlaljTVZfNpf7ah3V5+aOswbpcfxg+V7v32tR7afVBWn2cWn2p52JfvT3YatwFj9wjX550C3v586tJCv7c/S6vU0Rvdn26Hn0UrZRjbTT7bQ2n7qUh2PXSIdcHNbR6/jX/mda7wjbx8sd9iu/OU/eUPHWG+osVf9cGlKeOfWMFj9fiP8yt/uKUriOuj7+t4dzhU6IRvvwJ84o1nPsY8baDeZ477b+vLnMH+PfVZZ0vCZ9bl4VGlvh4bbu3WHE8HZP95cGoz4VGlnR9LjTCretzoRFuXZ8G8bnQCLeuz4VGuHV9LjTCreuTMcIty/LsB33Kku9HfTJGuGVZmv6oT8ZI2yxL6B/1yRhpm2Wp/6M+GSNts+wkgVGfjDxUZKcTjPpk5KEiO/Fg1CcjD+1fpkN8MvJQkZ3MMOqTkYeK7LSHUZ+QPCQ7QWLUJyQPOUgecpA85AziE5KHHCQPOUgecpA85CB5yEPykIfkIQ/JQx6Sh7xBfELykIfkIQ/JQx6Sh2RnVw76lJ1yOeoTkodkJ2eO+oTkIdlpnKM+IXlIdsLnqE9IHpKdGjrqE5KHZCeRjvqE5CHZ6aajPiF5SHZi6qhPSB6SncI66hOSh2Qnu476hOShhajbfZ+QPCQ7gXbUJyQPyU61HfUJyUOyk3JHfULykOz03VGfkDwkO9F31CckD8lOCR71CclDspOHR31C8pDsNONRn5A8JDshedQnJA/JTl0e9QnJQ7KTnEd9QvKQ7HToUZ+QPCQ7cXrUJyQPyU6xHvUJyUMr8am7PiF5aCU+ddcnJA+txKfu+oTkoZX41F2fkDwE4VMXCJ+6QPjUBcKnLhA+dYHwqQuET10gfOoC4VMXCJ+6QPjUBcKnrhA+dYXwqSuET10hfOq6GcQnIw9VCJ+6QvjUFcKnrhA+dYXwqSuET10hfOoK4VNXCJ+6QvjUFcKnrhA+dYXwqSuET10hfOoK4VNXCJ+6QvjUFcKnrhA+dYXwqSuET10hfOoK4VNXCJ+6QvjUFcKnrhA+dYXwqSuET10hfOoK4VNXCJ+6QvjUFcKnrhA+dYXwqSuET10hfOoK4VNXCJ+6QvjUFcKnrhA+dYXwqSuET10hfOoK4VNXCJ+6QvjUFcKnrhA+dYXwqSuET10hfOoK4VNXCJ+6QvjUFcKnrhA+dYXwqSuET10hfOoK4VNXCJ+6QvjUFcKnrhA+dYXwqSuET10hfOoK4VNXCJ+6QvjUFcKnrhA+dYXwqSuET10hfOoK4VNXCJ+6QvjUFcKnrhA+dYXwqSuET10hfOoK4VNXCJ+6QvjUFcKnrhA+dYXwqSuDT+03Bp9694nIQ7tPRB7afa6Th5I/ZaQQv/k0iM918lDf59x5KCV/+azbvc+mfu6U80j93NnlkfqXJxLnw6U+5Hv1X4Jej3J+JMjNJsjPJijMJki1vTX1qk2rqVc9mjf1qgfupl71GN3Uqx6Ov9TLInebetWDbFOvejxt6lUPnU29dK+VBdQ29dK9VhYm29RL91pZ8OuXelmca1Mv3Wtl0atNvXSvlcWkNvXSvVYWadrUS/daWfxoUy/da2VRoU29dK+VxXA09dq1l845siCMpt6k1UvnHFkURVMvnXNksRFNvXTOkUU8NPXSvVYWx9DUS/daWXRCUy/da2UxB029dK+VRRI09dK9VhYf0NRL91rZq/5NvXSvlb2W39RL91rZK/RNvXSvlb3u3tRL91rZq+lNvXSvlb1G3tRL91rZK99NvXSvlb2e3dRL91rZq9RNvXKvdbLXnpt65V7rZK8oN/XKvdZtyr3WyV4SbuqVe62b/OrvI/XKvdZt0r3WSfdaJ91rnXSvddK9Vvpus5O+2+yk7za7hWDWPRiKK5PxEdzLH1qF6LZzdYy5X/h8ycgpfNduwtqjsPYkrD0Lay9Ta8/53COd/6791YE+lM3O1cVCX7vP4Xxpn5O7La4/dYN87qh1i/2lLviT6OZCunUZKz8VMAR3vvuh3l7ZO2s1fPnjsr9Xw5quumwu9dc+roufuy7XH4bP1e69NvVBWr1Jq09Tqy/1XOyrtwdbjbvgkXvky7NuYZlZ8Ofud2WdInqz69P16KNopRxro9nvaui3qXtpCHa9dMj1QQ2tnn/NLoa4wDbhX/64T/Hdeeae4repM9RfrPjbNqCpY99YweO12MUa+otTuo64Pv62hvZphL/+HMZPDX9dw7mPEe86mPtt7rT/vrrMHeDfV5d1viR8al1kf0/wfXH08dp2b7EiHD4XGlnS9bnQyJKuz4VGuHV9GsTnQiPcuj4XGuHW9bnQCLeuz4VGuHV9Mka4eVme/ahPxgg3L8vIH/WJGGm7+zSIT8RI290nYqTt7hMx0nb3iRhpu/uE5CHZmQOjPiF5SHaOwahPSB6SnY0w6hOSh2TnLYz6hOQh2RkOoz4heUh2LsSoT0geMkgeMkgeMoP4hOQhg+Qhg+Qhg+Qhg+ShCMlDEZKHIiQPRUgeigbxCclDEZKHIiQPRUgeipA8JDu7ctQnJA/JzsMc9QnJQ7IzNkd9QvKQ7NzOUZ+QPCQ7C3TUJyQPyc4XHfUJyUOyM0tHfULykOwc1FGfkDwkO1t11CckD8nOax31CclDsjNgR31C8pDsXNlRn5A8JDurdtQnJA/Jzr8d9QnJQ7IzdUd9QvKQ7JzeUZ+QPCQ7+3fUJyQPyc4THvUJyUOyM4pHfULykOzc41GfjDwUZGcpj/pk5KEgO5951CcjD4XNID4ZeSjIzpEe9cnIQ0F2NvWoT0geWolP3fUJyUMr8am7PiF5aCU+ddcnJA+txKfu+oTkoZX41F2fkDwE4VMHCJ86QPjUAcKnDhA+dYDwqQOETx0gfOoA4VMHCJ86QPjUAcKnDhA+dYDwqQOETx0gfOoA4VMHCJ86QPjUAcKnDhA+dYDwqQOETx0gfOoA4VMHCJ86QPjUAcKnDhA+dYDwqQOETx0gfOoA4VMHCJ86QPjUAcKnDhA+dYDwqQOETx0gfOoA4VMHCJ86QPjUAcKnDhA+dYDwqQOETx0gfOoA4VMHCJ86QPjUAcKnDhA+dYDwqQOETx0gfOoA4VMHCJ86QPjUAcKnDhA+dYDwqQOETx0gfOoA4VMHCJ86QPjUAcKnDhA+dYDwqQOETx0gfOoA4VMHCJ86QPjUAcKnDhA+dYDwqQOETx0gfGqD8KkNwqc2CJ/aIHzq/V+F+GTkIYPwqQ3CpzYIn9ogfGqD8KkNwqc2CJ/aIHxqg/CpDcKnNgif2iB8aoPwqQ3CpzYIn9ogfGqD8KkNwqc2CJ/aIHxqg/CpDcKnNgif2iB8aoPwqQ3CpzYIn9ogfGpbiE+d/CkjhfjN5zp5qO9znTzU9zl3HkrJXz7rdu+zqZ875TxSP3d2eaD+9YRo58OlPuR79U2Qm02Qn01QmE2QzSZItb019apNq6lXPZo39aoH7qZe9Rj9pV4WztvUqx55m3rVg2xTr3o8bepNWr10r5UF1Db10r1WFibb1Ev3Wlnwa1Mv3WtlIa1NvXSvlQWqNvXSvVYWftrUS/daWVBpUy/da2Whok29dK+VBYB+qZfFcDT12rWXzjmyIIymXjrnyEIrmnrpnCMLmGjqlXNOlIVBNPXKvTbKghuaeuVeGzflXhtl0QlNvXKvjbKYg6ZeuddGWSTBl3pZ0EBTL91rZaEATb10r5W9wN/US/da2cv2Tb10r5W9GN/US/da2UvsTb10r5W9cN7US/da2cvhTb10r5W9yN3US/da2UvXTb10r5W9IN3US/da2cvMTb10r5W9eNzUS/da2UvCTb10r5386u8j9dK91qR7rUn3WpPutSbda19/Xfmp6qV7rfTd5ih9tzktBLPuwVCSm4yPkF7+0Crsz4fP1THmfuHzJSOn8F17FNaehLVnYe1FWHudWnvO5x7p/DftL39QFcpm5+pioa/d53C+tM/J3RbXn7pBPnfUusX+Uhf8SXRzId26jJWfChiCO9/9UG+v7J0dNXTL1LCmqy6bS/21j+sS5q7L9Yfhc7V7r029SauP0urz1OpLPRf76u3BVuMueOQe+fKsW1hhFvy5+11dp4je7Pp0PfooWinH2v17kl/WMEzdS0Ow66VDrg9qaPX8a3YxxBW2iZc/7lN8d566p4SpM9RfrPjbNiBbp+DxWuxiDf3FKV1HXB9/W8O5w6dGI0yfGv66hnMfI952MA9zp/331WXuAP+2utg6XxI+ty4LjSzx8dp2b7HieDom+8uDUZ8LjSzp+jSIz4VGuHV9LjTCretzoRFuXZ8LjXDr+lxohFvPpyyl/gefnVFYSZZnP+qTMcItyTLyR30axCdjpG2SJfSP+mSMtE2y1P9Rn4yRtkl2ksCoT0gekp1OMOoTkodkJx6M+oTkIdkpCqM+IXlIdjLDqE9IHpKd9jDqE5KHZCdIjPqE5KFsEJ+QPJQheShD8lCG5KEMyUMFkocKJA8VSB4qkDxUDOITkocKJA8VSB4qkDxUIHmoQvKQ7OzKUZ+QPCQ7D3PUp0F8QvKQ7DTOUZ+QPCQ74XPUJyMPZdmpoaM+GXkoy04iHfXJyEN5M4hPRh7KshNTR30y8lCWncI66hOSh2Qnu476hOShhajbfZ+QPCQ7gXbUJyQPyU61HfUJyUOyk3JHfULykOz03VGfkDwkO9F31CckD8lOCR71CclDspOHR31C8pDsNONRn5A8JDshedQnJA/JTl0e9QnJQ7KTnEd9QvKQ7HToUZ+QPCQ7cXrUJyQPyU6xHvUJyUMr8am7PiF5aCU+ddcnJA+txKfu+oTkoZX41F2fkDwE4VNnCJ86Q/jUGcKnzhA+dYbwqTOET50hfOoM4VNnCJ86Q/jUGcKnzhA+dYbwqTOET50hfOoM4VNnCJ86Q/jUGcKnzhA+dYbwqTOET50hfOoM4VNnCJ86Q/jUGcKnzhA+dYbwqTOET50hfOoM4VNnCJ86Q/jUGcKnzhA+dYbwqTOET50hfOoM4VNnCJ86Q/jUGcKnzhA+dYbwqTOET50hfOoM4VNnCJ+6QPjUBcKnLhA+dYHwqctmEJ+MPFQgfOoC4VMXCJ+6QPjUBcKnLhA+dYHwqQuET10gfOoC4VMXCJ+6QPjUBcKnLhA+dYHwqQuET10gfOoC4VMXCJ+6QPjUBcKnLhA+dYHwqQuET10gfOoC4VMXCJ+6QPjUBcKnLhA+dYHwqQuET10gfOoC4VMXCJ+6QPjUBcKnLhA+dYHwqQuET10gfOoC4VMXCJ+6QPjUBcKnLhA+dYHwqQuET10gfOoC4VMXCJ+6QPjUBcKnLhA+dYHwqQuET10gfOoC4VMXCJ+6LMSnTv6UkUL85nOdPNT3uU4e6vucOw+l5C+fdbv32dTPnXIeqJ+cJf1I/csTifPhUh/yvfomyM8mKMwmyGYTFGcTpNremnrVptXUqx7Nm3rVA/eXelmMb1Ovejhu6lWPvE296kG2qTdp9aqHzqZeutfKAmqbeuleKwuT/VIvi4ht6qV7rSzOtamX7rWy6NWmXrrXymJSm3rpXiuLNG3qlXttlcWPNvXKvbbKokKbeuVeW2UxHE29du1NWr1yzqmyeIumXjnnVFkURVMvnXNksRFNvXTOkUU8NPXSvVYWx9DUS/daWXRCUy/da2UxB029dK+VRRI09dK9VhYf0NRL91rZq/5NvXSvlb2W39RL91rZK/RNvXSvlb3u3tRL91rZq+lNvXSvlb1G3tRL91rZK99NvXSvlb2e3dRL91rZq9RNvXSvlb323NRL91rZK8pNvXSvlb1O3NRL99rJr/4+Ui/daye/+vtIvXSvzdK9Nkv32tffQH6qeuleK323uUrfba7Kd5vDthDMugND2X2+fHfq4gh2Qa/ecEJ027k6xtwvfL5k5BS+a0/C2rOw9iKsvepqf/mjqjHtOZ97pPPftb860Iey2bm6WOhr9zmcL+1zcrfF9adukM8dtW6xv9QFfxLdXEi3LmPlpwKG4M53P9TbK3tnRw39MjXcv5Y567K51F/7uC42d12uPwyfq917beqjtPokrb5Mrb7Uc/GfOz8Pthp3wSP3yJdn3cIqs+BP3e9e/hjtLxbRm12frkcfRSvlWBvNflvDqXtpCHa9dMj1QQ2tnn/NLoa4wjbx8sd9iu/Oc/cUg1b8bRvQ1LFvrODxWuxiDf3FKV1HXB9/W8O5w6dGI8yfGv66hnMfI952ME9zp/231SXPHeDfV5d1viR8bl0WGlni47Xt3mLF8XRM9pcHoz4N4nOhEW5dnwuNcOv6XGiEW9fnQiPcuj4XGuHW8ynLnh/1iRjhtvtEjHDbfSJGuO0+DeITMdJ294kYabv7RIy03X0iRtruPhEjbcMmOx9g1CckD8nOHBj1CclDsnMMRn1C8pDsbIRRn5A8JDtvYdQnIw852RkOoz4ZecjJzoUY9cnIQ24ziE9GHnIbIw+5jZGH9n8J4hOShxwkDzlIHnKQPOQgecgZxCckDzlIHnKQPOQgechB8pCH5CEPyUOysytHfULykOw8zFGfkDwkO2Nz1CckD8nO7Rz1CclDsrNAR31C8pDsfNFRn5A8JDuzdNQnJA/JzkEd9QnJQ7KzVUd9QvKQ7LzWUZ+QPCQ7A3bUJyQPyc6VHfUJyUOys2pHfULykOz821GfkDwkO1N31CckD8nO6R31CclDsrN/R31C8pDsPOFRn5A8JDujeNQnJA/Jzj0e9QnJQ7KzlEd9QvKQ7HzmUZ+QPCQ783nUJyQPyc6RHvUJyUOys6lHfULy0Ep86q5PSB5aiU/d9QnJQyvxqbs+IXloJT511yckD63Ep+76hOQhCJ/aQfjUDsKndhA+tYPwqR2ET+0gfGoH4VM7CJ/aQfjUDsKndhA+tYPwqR2ET+0gfGoH4VM7CJ/aQfjUHsKn9hA+tYfwqT2ET+03g/hk5CEP4VN7CJ/aQ/jUHsKn9hA+tYfwqT2ET+0hfGoP4VN7CJ/aQ/jUHsKn9hA+tYfwqT2ET+0hfGoP4VN7CJ/aQ/jUHsKn9hA+tYfwqT2ET+0hfGoP4VN7CJ/aQ/jUHsKn9hA+tYfwqT2ET+0hfGoP4VN7CJ/aQ/jUHsKn9hA+tYfwqT2ET+0hfGoP4VN7CJ/aQ/jUHsKn9hA+tYfwqT2ET+0hfGoP4VN7CJ/aQ/jUHsKn9hA+tYfwqT2ET+0hfGoP4VN7CJ/aQ/jUHsKn9hA+tYfwqT2ET+0hfGoP4VN7CJ/aQ/jUHsKn9hA+tYfwqT2ET+0hfGoP4VN7CJ/aQ/jUHsKn9hA+tYfwqT2ET+0hfGoP4VN7CJ/aQ/jUHsKn9hA+tYfwqT2ET+0hfGoP4VN7CJ/aL8SnTv6UkUL85nOdPNT3uU4e6vucOw+l5C+fdbv3+Ud9mJw6/Uj93NnlkfqXJxLnw6U+5Hv1TVCYTZDNJijOJijNJki1vTX1qk2rqVc9mn+plwX+NvWqx+imXvVw3NSrHnmbepNWr3o8bepVD51NvXSvlQXUNvXSvVYWJtvUS/daWfBrUy/da2UhrU29dK+VBao29dK9VhZ+2tRL91pZUGlTL91rZaGiTb10r5UFgH6pl8VwNPXatZfOObIgjKZeOufIQiuaeumcIwuYaOqlc44sDKKpl+61suCGpl6618pCFpp66V4rC0Ro6qV7rSy8oKmX7rWyoIGmXrrXykIBmnrpXit7gb+pl+61spftm3rpXit7Mb6pl+61spfYm3rpXit74bypl+61spfDm3rpXit7kbupl+61speum3rpXit7Qbqpl+61speZm3rpXit78bipl+61speEm3rlXmuTX/19pF6519qm3GttU+61+2tJq1futbYp91qTvtts0nebTfpusy0Es+7BUCxPxkewlz+0CtFt5+oYc7/w+ZKRU/iuPQtrL8Laq672lz+seqZ2N7X2nM890vnv2l8d6PfHknauLhb62n0O50v7nNxtcf2pG+RzR61b7C91wZ9ENxfSrctY+amAIbjz3d+/MroWe2dHDcMyNazpqsvmUn/t47rEuety/WH4XO3ea1OfpNVnafV1avWlnot99fZgq3EXPHKPfHnSLezlz68mKfhT97uXP0b7i0X0Zten69FH0Uo51kaz39Zw6l4agl0vHXJ9UMPdzFnDGOIS24R93p0X7ylTZ6i/WPG3bUBTx76xgsdrsYs19BendB1xffxtDecOnxqNsHxq+Osazn2MeNfBPG5zp/331WXuAP++uqzzJeFz67LQyBIfr233FivC4dMgPhcaWdL1udAIt67PhUa4dX0uNMKt63OhEW49n7JE+VGfC41w6/pkjHCLsjz7UZ8G8ckY4RZlafqjPhkjbaMsoX/UJ2OkbZSl/o/6ZIy0jbKTBEZ9QvKQ7HSCUZ+QPCQ78WDUJyQPyU5RGPUJyUOykxlGfULykOy0h1GfkDwkO0Fi1CckDwVIHgqQPBQgeShA8pBB8pBB8pBB8pBB8pAZxCckDxkkDxkkDxkkDxkkD0VIHoqQPBQheUh2duWoT4P4hOQh2cmZoz4heUh2GueoT0gekp3wOeoTkodkp4aO+oTkIdlJpKM+IXlIdrrpqE9IHpKdmDrqE5KHZKewjvqE5CHZya6jPiF5aCHqdt8nJA/JTqAd9QnJQ7JTbUd9QvKQ7KTcUZ+QPCQ7fXfUJyQPyU70HfUJyUOyU4JHfULykOzk4VGfkDwkO8141CckD8lOSB71CclD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OkD41AbhUxuET20QPrVB+NT7vwrxychDBuFTG4RPbRA+tUH41AbhUxuET20QPrVB+NQG4VMbhE9tED61QfjUBuFTG4RPbRA+tUH41AbhUxuET20QPrVB+NQG4VMbhE9tED61QfjUBuFTG4RPbRA+tUH41AbhUxuET20QPrVB+NQG4VMbhE9tED61QfjUBuFTG4RPbRA+tUH41AbhUxuET20QPrVB+NQG4VPbQnzq5E8ZKcRvPtfJQ32f6+Shvk+b2mdK/vJZt3ufTf3cKeeR+rmzyyP1L08kzodLfcj36pugMpugOpmg18ORHwlyswlSbW9NvWrTaurnbkWP1KseuJt61WN0U696OG7qVY+8Tb3qQfZLvSwet6lXPXQ29dK9VhZQ29RL91pZmGxTL91rZcGvTb10r5WFtH6pl0WvNvXSvVYWk9rUS/daWaRpUy/da2Xxo029dK+VRYU29cq9NspiOJp66drLIjOaeuWcE2XxFk29cs6JsiiKpl4550RZbERTr5xzoizioamX7rWyOIamXrrXyqITmnrpXiuLOWjqpXutLJKgqZfutbL4gKZeutfKXvVv6qV7rey1/KZeutfKXqFv6qV7rex196ZeutfKXk1v6qV7rew18qZeutfKXvlu6qV7rez17KZeutfKXqVu6qV7rey156ZeutfKXlFu6qV7rex14qZeutdOfvX3kXrpXjv51d9H6qV7bZTutVG61ybpXpuke6303eYofbc5St9tTgvBrHswlBQm4yOklz+0CtFt5+oYc7/w+ZKRU/iu3QtrD8LaTVh7FNaeptae87lHOv9d+6sDfSibnauLhb52n8P50j4nd1tcf+oG+dxR6xb7S13wJ9HNhXTrMlZ+KmAI7nz3Q729snd21LAsU8OarrpsLvXXPqzLyx9lDdbl+sPwudq916beSav30uptavWlnot99fZgq3EXPHKPfHnSLezlz68mKfhz97u0ThG92fXpevRRtFKOtftT3N/WcOpeGoJdLx1yfVBDq+dfs4shLrFN1M+789o9JU6dof5ixd+1AcWpY99YweO12MUa+otTuo64Pv62hnOHT4lG+PInzCvW0D4H8x/rMnfaf19d5g7w76vLOl8SPrcuC40s8fHadm+x4ng6JvvLg0Gfsr9RGPW50Ai3rs+FRrh1fS40wq3r0yA+Fxrh1vW50Ai3rk/G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2fPUy55nv+x5zsuep1/2PPOy57nvep718ewF/Su2VH/6QOttDxRve6B82wPV2x5ov+2BztseqP+nPdD+/B6atz3QfdkDrY+3PdB62wP9+Zt64sffUNuN/+j3p8lXPU296mn2q57mvOpp+lVPM696mvump4mPVz3NetXTvOoujlfdxfGquzhedRfHq+7ieNVdHK+6i+NVd3G+6i7OV93F+aq7OF91F+er7uJ81V2cr7qL81V3cb7qLs5X3cX1qru4XnUX16vu4nrVXVyvuovrVXdxveourlfdxfWqu7hedRfvV93F+1V38X7VXbxfdRfvV93F+1V38X7VXbxfdRfvV93F+1V38XnVXXxedRefV93F51V38XnVXXxedRefV93F51V38XnVXXxedRf3q+7iftVd3K+6i/tVd3G/6i7uV93F/aq7uF91F/er7uJ+1V08r7qL51V38bzqLp5X3cXzqrt4XnUXz6vu4nnVXTyvuovnVXfxfdVdfF91F99X3cX3VXfxfdVdfF91F99X3cX3VXfxfdVdfN90F8fHm+7i+HjTXRwfb7qL4+NNd3F8vOkujo833cXx8aa7OD7edBfHevS++aO/WizWetfjPPpW/dFfhBLP/hGqP36c867H6Xc9zrzrce6rHufZP0f1x4/zN94734+Iv/+I/PuPqL/9iGe/zfoPfw949vus//Bx6l2/Yde7fsN+9lut//hxHv0cYdePn9P2yw9i/PVx6l2Ps9/1OOddj9PvepyHP5yZH4+Tnz7OfdXj7I93Pc561+PEux4n3/U49aoPhfe7Psnc7/okc7/rk8z9rk8y97s+yTzv+iTzrHc9TrzrcfJdj/OuW/m861Y+77qVz7tu5fOuW/m861bud93K/a5bud91K/e7buV+163c77qV+123cr/rVu533cr9rlt53nUrz7tu5XnXrTzvupXnXbfyvOtWnnfdyvOuW3nedSvPu27l+65b+b7rVr7vupXvq35oZNxX/dTIuP2ux5l3Pc590+Pkx7M/VfMPvviYH+tdjxPvepx81+PUux7n4R+t+T/+al9+nHc9Tr/rceZdj3Nf9Tjr412P86ofdpwr3vU4r/pxx7nqXY/zqh94nOu863H6XY8z73qcV/0A+oxX/QT6jHfdyvGuWznedSvHu27leNetHO+6leNdt3K861aOd93K+a5bOd91K+e7buV8162c77qV8123cr7rVs533cr5rls533Ur17tu5XrXrVzvupXrXbdyvehW3vFvX3wWer6f8M3Bf8xmfV998cniH60WrYJWSav611f5b5//SZz+8W901k/S3/1jVbTatDq0+vT3pB3542sV8Ut/v+wGd9d2n/8Bid/YLdwF7hJ3hbuNu4M77OVgLwd7aeylsZfGXhp7aeylsZfGXhp7aeylsZfBXgZ7GexlsJfBXgZ7GexlsJfBXgZ7udjLxV4u9nKxl4u9XOzlYi8Xe7nYy8Ve1seHDpcOQ4epw9Lh1uHRYetwdKjlLC1naTlLy1laztJylpaztJyl5SwtZ2k5oeWElhNaTmg5oeWElhNaTmg5oeWElpNaTmo5qeWklpNaTmo5qeWklpNaTmo5peWUllNaTmk5peWUllNaTmk5peWUlrO1nK3lbC1nazlby9laztZyVIaX0vBSG16Kw0t1eCkPL/XhpUC8VIiXEvFSI16KxEuVeCkTL3XipVC8VIqXUvFSK16KxUu1eCkXL/XipWC8VIyXkvFSM16KxkvVeCkbL3XjpXC8VI6X0vFSO/7iR0Ptut+/NrynPj4dpg5Lh1uHR4etw9HhteEXP3Lnd4ZLh6HD1GHpcOvw6LB1ODrUcpaWs7ScpeUsLWdpOUvLWVrO0nKWlrO0nNByQssJLSe0nNByQssJLSe0nNByQstJLSe1nNRyUstJLSe1nNRyUstJLSe1nNJySsspLae0nNJySsspLae0nNJySsvZWs7WcraWs7WcreVsLWdrOVvL2VrO1nKOlnO0nKPlHC3naDlHyzlaztFyjpZztJzWclrLaS2ntZzWclrLaS2ntZzWclrLGS1ntJzRckbLGS1ntJzRckbLGS1ntJyr5VwtRw051JBDDTnUkEMNOdSQQw051JBTDTnVkFMNOdWQUw051ZBTDTnVkFMNOdWQUw051ZBTDTnVkFMNOdWQUw051ZBTDTnVkFMNOdWQUw051ZBTDTnVkFMNOdWQUw051ZBTDTnVkFMNOdWQUw051ZBTDTnVkFMNOdWQUw051ZBTDTnVkFMNOdWQUw051ZBTDTnVkFMNOdWQUw051ZBTDTnVkFMNOdWQUw051ZBTDTnVkFMNOdWQUw051ZBTDTnVkFMNOdWQUw051ZBTDTnVkFMNOdWQUw051ZBTDTnVkFMNOdWQUw051ZBTDTnVkFMNOdWQUw051ZBTDTnVkFMNOdWQUw051ZBTDTnVkFMNOdWQSw251JBLDbnUkEsNudSQSw251JBLDbnUkEsNudSQSw251JBLDbnUkEsNudSQSw251JBLDbnUkEsNudSQSw251JBLDbnUkEsNudSQSw251JBLDbnUkEsNudSQSw251JBLDbnUkEsNudSQSw251JBLDbnUkEsNudSQSw251JBLDbnUkEsNudSQSw251JBLDbnUkEsNudSQSw251JBLDbnUkEsNudSQSw251JBLDbnUkEsNudSQSw251JBLDbnUkEsNudSQSw251JBLDbnUkEsNudSQSw251JBLDbnUkEsNudSQSw251JBLDbnUkEsNudSQSw251JBLDbnUkLca8lZD3mrIWw15qyFvNeSthrzVkLca8lZD3mrIWw15qyFvNeSthrzVkLca8lZD3mrIWw15qyFvNeSthrzVkLca8lZD3mrIWw15qyFvNeSthrzVkLca8lZD3mrIWw15qyFvNeSthrzVkLca8lZD3mrIWw15qyFvNeSthrzVkLca8lZD3mrIWw15qyFvNeSthrzVkLca8lZD3mrIWw15qyFvNeSthrzVkLca8lZD3mrIWw15qyFvNeSthrzVkLca8lZD3mrIWw15qyFvNeSthrzVkLca8lZD3mrIWw15qyFvNeSthrzVkLca8lZD3mrIWw15qyFvNeSthrzVkLca8lZD3mrIWw35qCEfNeSjhnzUkI8a8lFDPmrIRw35qCEfNeSjhnzUkI8a8lFDPmrIRw35qCEfNeSjhnzUkI8a8lFDPmrIRw35qCEfNeSjhnzUkI8a8lFDPmrIRw35qCEfNeSjhnzUkI8a8lFDPmrIRw35qCEfNeSjhnzUkI8a8lFDPmrIRw35qCEfNeSjhnzUkI8a8lFDPmrIRw35qCEfNeSjhnzUkI8a8lFDPmrIRw35qCEfNeSjhnzUkI8a8lFDPmrIRw35qCEfNeSjhnzUkI8a8lFDPmrIRw35qCEfNeSjhnzUkI8a8lFDPmrIRw35qCEfNeSjhnzUkI8a8lFDPmrIRw35qCEfNeSjhnzUkFsNudWQWw251ZBbDbnVkFsNudWQWw251ZBbDbnVkFsNudWQWw251ZBbDbnVkFsNudWQWw251ZBbDbnVkFsNudWQWw251ZBbDbnVkFsNudWQWw251ZBbDbnVkFsNudWQWw251ZBbDbnVkFsNudWQWw251ZBbDbnVkFsNudWQWw251ZBbDbnVkFsNudWQWw251ZBbDbnVkFsNudWQWw251ZBbDbnVkFsNudWQWw251ZBbDbnVkFsNudWQWw251ZBbDbnVkFsNudWQWw251ZBbDbnVkFsNudWQWw251ZBbDbnVkFsNudWQWw251ZBbDbnVkFsNudWQWw251ZBHDXnUkEcNedSQRw151JBHDXnUkEcNedSQRw151JBHDXnUkEcNedSQRw151JBHDXnUkEcNedSQRw151JBHDXnUkEcNedSQRw151JBHDXnUkEcNedSQRw151JBHDXnUkEcNedSQRw151JBHDXnUkEcNedSQRw151JBHDXnUkEcNedSQRw151JBHDXnUkEcNedSQRw151JBHDXnUkEcNedSQRw151JBHDXnUkEcNedSQRw151JBHDXnUkEcNedSQRw151JBHDXnUkEcNedSQRw151JBHDXnUkEcNedSQRw151JBHDXnUkEcNedSQRw151JBHDXnUkEcNedSQrxryVUO+ashXDfmqIV815KuGfNWQrxryVUO+ashXDfmqIV815KuGfNWQrxryVUO+ashXDfmqIV815KuGfNWQrxryVUO+ashXDfmqIV815KuGfNWQrxryVUO+ashXDfmqIV815KuGfNWQrxryVUO+ashXDfmqIV815KuGfNWQrxryVUO+ashXDfmqIV815KuGfNWQrxryVUO+ashXDfmqIV815KuGfNWQrxryVUO+ashXDfmqIV815KuGfNWQrxryVUO+ashXDfmqIV815KuGfNWQrxryVUO+ashXDfmqIV815KuGfNWQrxryVUO+ashXDfmqIV815KuGfNWQrxryVUO+ashXDXl9KCJ/Wy5eBi+Tl8XLzcvDy+bl8JIbWtzQ4oYWN7S4ocUNLW5ocUOLG1rc0OKGghsKbii4oeCGghsKbii4oeCGghsKbii5oeSGkhtKbii5oeSGkhtKbii5oeSGihsqbqi4oeKGihsqbqi4oeKGihsqbmhzQ5sb2tzQ5oY2N7S5oc0NbW5oc0ObGzrc0OGGDjd0uKHDDR1u6HBDhxs63NDhhpobam6ouaHmhpobam6ouaHmhpobam5ouKHhhoYbGm5ouKHhhoYbGm5ouKHhhi43dLmhyw1dbuhyQ5cbutzQ5YYuN8ROvdipFzv1Yqde7NTfPu3g5ebl4WXzcnjJDbFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYacedurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879VWnjg916m/LxcvgZfKyeLl5eXjZvBxeckOLG1rc0OKGFje0uKHFDS1uaHFDixta3FBwQ8ENBTcU3FBwQ8ENBTcU3FBwQ8ENJTeU3FByQ8kNJTeU3FByQ8kNJTeU3FBxQ8UNFTdU3FBxQ8UNFTdU3FBxQ8UNbW5oc0ObG9rc0OaGNje0uaHNDW1uaHNDhxs63NDhhg43dLihww0dbuhwQ4cbOtxQc0PNDTU31NxQc0PNDTU31NxQc0PNDQ03NNzQcEPDDQ03NNzQcEPDDQ03NNzQ5YYuN3S5ocsNXW7ockOXG7rc0OWG2KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IudOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5262KmLnbrYqYudutipi5262KmLnbrYqYudutipi5262KmLnbrYqYudutipi5262KmLnbrYqYudutipi5262KmLnbrYqYudutipi5262KmLnbrYqYudutipi5262KmLnbrYqYudutipi5262KmLnbrYqYudutipi5262KmLnbrYqYudutipi5262KmLnbrYqYudutipi5262KmLnbrYqYudutipi5262KmLnbrYqYudutipi5262KmLnbrYqYudutipi5262KmLnbrYqYudutipi5262KmLnbrYqYudutipi5262KmLnbrYqYudutipi5262KmLnbrYqYuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692akPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Iedutmpm5262ambnbrZqZudutmpm5262ambnbrZqZudutmpm5262ambnbrZqZudutmpm5262ambnbrZqZudutmpm5262ambnbrZqZudutmpm5262ambnbrZqZudutmpm5262ambnbrZqZudutmpm5262ambnbrZqZudutmpm5262ambnbrZqZudutmpm5262ambnbrZqZudutmpm5262ambnbrZqZudutmpm5262ambnbrZqZudutmpm5262ambnbrZqZudutmpm5262ambnbrZqZudutmpm5262ambnbrZqZudutmpm5262ambnbrZqZudutmpm5262ambnXrYqYedetiph5162KmHnXrYqYedetiph5162KmHnXrYqYedetiph5162KmHnXrYqYedetiph5162KmHnXrYqYedetiph5162KmHnXrYqYedetiph5162KmHnXrYqYedetiph5162KmHnXrYqYedetiph5162KmHnXrYqYedetiph5162KmHnXrYqYedetiph5162KmHnXrYqYedetiph5162KmHnXrYqYedetiph5162KmHnXrYqYedetiph5162KmHnXrYqYedetiph5162KmHnXrYqYedetiph5162KmHnXrYqYedetiph5162KmHnXrYqYedetiph536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3VqfNDnfrbcvEyeJm8LF5uXh5eNi+Hl9zQ4oYWN7S4ocUNLW5ocUOLG1rc0OKGFjcU3FBwQ8ENBTcU3FBwQ8ENBTcU3FBwQ8kNJTeU3FByQ8kNJTeU3FByQ8kNJTdU3FBxQ8UNFTdU3FBxQ8UNFTdU3FBxQ5sb2tzQ5oY2N7S5oc0NbW5oc0ObG9rc0OGGDjd0uKHDDR1u6HBDhxs63NDhhg431NxQc0PNDTU31NxQc0PNDTU31NxQc0PDDQ03NNzQcEPDDQ03NNzQcEPDDQ03dLmhyw1dbuhyQ5cbutzQ5YYuN3S5IXbqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vip17s1IuderFTL3bqxU692KkXO/Vipw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKcOdupgpw526mCnDnbqYKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnTnbqZKdOdupkp0526mSnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupipy526mKnLnbqYqcudupip97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqzU692ak3O/Vmp97s1JuderNTb3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhpz7s1Ied+rBTH3bqw0592KkPO/Vhp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqdudupmp2526manbnbqZqceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnHnbqYaceduphpx526mGnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3ZqS879WWnvuzUl536slNfdurLTn3Z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g5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtipg5062KmDnTrYqYOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZOdOtmpk5062amTnTrZqZO1OVmbk7U5WZuTtTn7L/gbV//w73XN+XjklPXIKfHIKfnIKfXnT6n4fsovP4Dsn0/Zj5xyHjmlHznlz/9929/+S36ckl+ccp845X48csp65JR45JR85JS/4N3/w78HOf+CH73zO6ecR07pR06ZR0554m9ar4+PR05Zj5wSj5ySj5xSj5yyHznlPHJKP3LKPHLKI+/+euTdX4+8++uRd3898u6vR9799ci7vx5599cj7/565N1fj7z78ci7H4+8+/HIux+PvPvxyLsfj7z78ci7H4+8+/HIu//IT1eqR366Uj3y05XqkZ+uVJ9/Nft3hkeHrcPR4cXh51/I/p3h0mHoMHVYOtRySsv5/CvY6+zvy3Xj07/Muz7/CvZvLa8uP/8K9m8tFy+Dl8nL4uXm5eElN7S5oc0NHW7ocEOHGzrc0IGG1jdJyn/7/DP9b/+F3y+Tj59f5pj7y27hLnCXuCvcbdwd3H3+u/qPD1b2/WI3uLu2+/yzw9/YLdwF7hJ3n/92fvsfu/PL1+L/abdxd3DXuBvcXdt9/hnFb+w+7eXsH7vzxS5wl7gr3G3cHdw17j7t5fT39+jM5+/R558z/PHu808ZfmO3cBe4S9zVv76L+/Fvn/7rm/z+3Qgz8+9+e8/sf/u0svv9e0vW+uWw/Y/Vt4f8/GO8Hd9/E1v7l58quNYvy+Hl573E+dHnz/+Bs37OPv/45Td2C3eBu8Rd4W7/a7tv/8//+x//r//0H/+X//1/+7+/Df7bf/b//Of/9b/8p//jP//j//0v/9//+d//k//6/wM="},{"name":"compute_note_hash_and_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"note_type_id":[{"start":3,"end":4}],"serialized_note":[{"start":4,"end":24}],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[24,25,26,27]},"bytecode":"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","debug_symbols":""},{"name":"constructor","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(initializer)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"address_note::aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"address_note::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"gm","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"gm":[{"start":37,"end":38}],"inputs":[{"start":0,"end":37}]},"return_type":{"abi_type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_non_existent_read_requests","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"address_note::aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"reverted","type":{"kind":"boolean"}}]},"visibility":"public"},"return_witnesses":[38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239]},"bytecode":"","debug_symbols":""}],"events":[],"file_map":{"3":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: u64,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: u64) -> T {\n        assert(index as u64 < self.len);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: u64) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u64 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u64 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"19":{"source":"// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n/// A hint for decomposing a single field into two 16 byte fields.\nunconstrained fn decompose_unsafe(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    // Take hints of the decomposition\n    let (xlo, xhi) = decompose_unsafe(x);\n    let borrow = lt_unsafe(PLO, xlo, 16);\n\n    // Range check the limbs\n    xlo.assert_max_bit_size(128);\n    xhi.assert_max_bit_size(128);\n\n    // Check that the decomposition is correct\n    assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n    // Check that (xlo < plo && xhi <= phi) || (xlo >= plo && xhi < phi)\n    let rlo = PLO - xlo + (borrow as Field) * TWO_POW_128;\n    let rhi = PHI - xhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n\n    (xlo, xhi)\n}\n\nunconstrained fn lt_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.__to_le_radix(256, num_bytes);\n    let y_bytes = y.__to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nunconstrained fn lte_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    lt_unsafe(x, y, num_bytes) | (x == y)\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    // Decompose a and b\n    let (alo, ahi) = decompose(a);\n    let (blo, bhi) = decompose(b);\n\n    let borrow = lte_unsafe(alo, blo, 16);\n\n    // Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if a == b {\n        false\n    } else if lt_unsafe(a, b, 32) {\n        assert_gt(b, a);\n        false\n    } else {\n        assert_gt(a, b);\n        true\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose_unsafe, decompose, lt_unsafe, assert_gt, gt, lt, TWO_POW_128, lte_unsafe, PLO, PHI};\n\n    #[test]\n    fn check_decompose_unsafe() {\n        assert_eq(decompose_unsafe(TWO_POW_128), (0, 1));\n        assert_eq(decompose_unsafe(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose_unsafe(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_lt_unsafe() {\n        assert(lt_unsafe(0, 1, 16));\n        assert(lt_unsafe(0, 0x100, 16));\n        assert(lt_unsafe(0x100, TWO_POW_128 - 1, 16));\n        assert(!lt_unsafe(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_lte_unsafe() {\n        assert(lte_unsafe(0, 1, 16));\n        assert(lte_unsafe(0, 0x100, 16));\n        assert(lte_unsafe(0x100, TWO_POW_128 - 1, 16));\n        assert(!lte_unsafe(0, TWO_POW_128, 16));\n\n        assert(lte_unsafe(0, 0, 16));\n        assert(lte_unsafe(0x100, 0x100, 16));\n        assert(lte_unsafe(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(lte_unsafe(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"20":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"30":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod pedersen;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint\n// docs:end:pedersen_commitment\n{\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field<N>(input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: [Field]);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self]);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self as Field]);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, [self.lo as Field, self.hi as Field]);\n    }\n}\n\nimpl<T, N> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n","path":"std/hash.nr"},"33":{"source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n","path":"std/merkle.nr"},"35":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n","path":"std/option.nr"},"47":{"source":"use dep::aztec::prelude::{AztecAddress, NoteHeader, NoteInterface, PrivateContext, emit_encrypted_log, Map, PrivateImmutable};\nuse dep::value_note::value_note::{ValueNote, VALUE_NOTE_LEN};\nuse dep::aztec::protocol_types::{traits::{Serialize, Deserialize}};\n\nuse dep::aztec::{\n    context::Context, hash::pedersen_hash, protocol_types::traits::Empty,\n    oracle::{nullifier_key::get_nullifier_secret_key, get_public_key::get_public_key},\n    note::{utils::compute_note_hash_for_consumption}\n};\n\nuse crate::player::Player;\nuse crate::player_turn::{PlayerTurn, PLAYER_TURN_NOTE_LENGTH};\n\nstruct Game {\n    players: [AztecAddress; 2],\n    turn: PlayerTurn,\n}\n\nimpl Game {\n    pub fn new(players: [AztecAddress; 2], turn: PlayerTurn) -> Self {\n        Game { players, turn }\n    }\n\n    pub fn get_opponent(self, player: AztecAddress) -> AztecAddress {\n        if player == self.players[0] {\n            self.players[1]\n        } else {\n            self.players[0]\n        }\n    }\n\n    pub fn reveal(self, player: Player) -> bool {\n        assert(self.turn.recipient == player.owner, \"It is not your turn\");\n        self.turn.guess == player.secret\n    }\n}\n\nglobal GAME_NOTE_LENGTH: Field = 2 + PLAYER_TURN_NOTE_LENGTH;\n\nimpl Serialize<GAME_NOTE_LENGTH> for Game {\n    fn serialize(game: Game) -> [Field; GAME_NOTE_LENGTH] {\n        let turn : [Field] = [];\n        \n        let mut turn = [].push_back(game.players[0].to_field());\n        turn = turn.push_back(game.players[1].to_field());\n\n        for i in 0..game.turn.serialize_content().len() as u32 {\n            turn = turn.push_back(game.turn.serialize_content()[i]);\n        };\n\n        let mut turn_arr : [Field; GAME_NOTE_LENGTH] = [0; GAME_NOTE_LENGTH];\n\n        for i in 0..GAME_NOTE_LENGTH as u32 {\n            turn_arr[i] = turn[i];\n        }\n        turn_arr\n    }\n}\n\nimpl Deserialize<GAME_NOTE_LENGTH> for Game {\n    fn deserialize(note: [Field; GAME_NOTE_LENGTH]) -> Game {\n        Game {\n            players: [\n                AztecAddress::from_field(note[0]),\n                AztecAddress::from_field(note[1]),\n            ],\n            turn: PlayerTurn::deserialize_content([note[2], note[3], note[4]]),\n        }\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-guessing-game/src/game.nr"},"48":{"source":"use dep::aztec::prelude::{AztecAddress, NoteHeader, NoteInterface, PrivateContext, emit_encrypted_log};\nuse dep::value_note::value_note::{ValueNote, VALUE_NOTE_LEN};\n\nuse dep::aztec::{\n    context::Context, hash::pedersen_hash, protocol_types::traits::Empty,\n    oracle::{rand::rand, nullifier_key::get_nullifier_secret_key, get_public_key::get_public_key},\n    note::{utils::compute_note_hash_for_consumption}\n};\n\nglobal PLAYER_NOTE_LENGTH: Field = 3;\n\nstruct Player {\n    owner: AztecAddress,\n    secret: Field,\n    randomness: Field,\n    header: NoteHeader,\n}\n\nimpl Player {\n    pub fn new(owner: AztecAddress, secret: Field) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        Player { owner, secret, randomness, header }\n    }\n}\n\nimpl NoteInterface<PLAYER_NOTE_LENGTH> for Player {\n    fn serialize_content(self) -> [Field; PLAYER_NOTE_LENGTH] {\n        [self.owner.to_field(), self.secret, self.randomness]\n    }\n\n    fn deserialize_content(serialized_note: [Field; PLAYER_NOTE_LENGTH]) -> Self {\n        Player {\n            owner: AztecAddress::from_field(serialized_note[0]),\n            secret: serialized_note[1],\n            randomness: serialized_note[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_content_hash(self) -> Field {\n        pedersen_hash(self.serialize_content(), 0)\n    }\n\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn get_header(note: Player) -> NoteHeader {\n        note.header\n    }\n\n    // Broadcasts the note to the opponent\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            Self::get_note_type_id(),\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n    }\n\n    fn get_note_type_id() -> Field {\n        // TODO(#4519): autogenerate\n        // python -c \"print(int(''.join(str(ord(c)) for c in 'CardNote')))\"\n        679711410078111116101\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-guessing-game/src/player.nr"},"49":{"source":"use dep::aztec::prelude::{AztecAddress, NoteHeader, NoteInterface, PrivateContext, emit_encrypted_log};\nuse dep::value_note::value_note::{ValueNote, VALUE_NOTE_LEN};\n\nuse dep::aztec::{\n    context::Context, hash::pedersen_hash, protocol_types::traits::Empty,\n    oracle::{rand::rand, nullifier_key::get_nullifier_secret_key, get_public_key::get_public_key},\n    note::{utils::compute_note_hash_for_consumption}\n};\n\nglobal PLAYER_TURN_NOTE_LENGTH: Field = 3;\n\nstruct PlayerTurn {\n    recipient: AztecAddress,\n    guess: Field,\n    randomness: Field,\n    header: NoteHeader,\n}\n\nimpl PlayerTurn {\n    pub fn new(recipient: AztecAddress, guess: Field) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        PlayerTurn { recipient, guess, randomness, header }\n    }\n\n    pub fn serialize(self) -> [Field; PLAYER_TURN_NOTE_LENGTH] {\n        [self.recipient.to_field(), self.guess, self.randomness]\n    }\n}\n\nimpl NoteInterface<PLAYER_TURN_NOTE_LENGTH> for PlayerTurn {\n    fn serialize_content(self) -> [Field; PLAYER_TURN_NOTE_LENGTH] {\n        [self.recipient.to_field(), self.guess, self.randomness]\n    }\n\n    fn deserialize_content(serialized_note: [Field; PLAYER_TURN_NOTE_LENGTH]) -> Self {\n        PlayerTurn {\n            recipient: AztecAddress::from_field(serialized_note[0]),\n            guess: serialized_note[1],\n            randomness: serialized_note[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_content_hash(self) -> Field {\n        pedersen_hash(self.serialize_content(), 0)\n    }\n\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.recipient);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.recipient);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn get_header(note: PlayerTurn) -> NoteHeader {\n        note.header\n    }\n\n    // Broadcasts the note to the opponent\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.recipient);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            Self::get_note_type_id(),\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n    }\n\n    fn get_note_type_id() -> Field {\n        // TODO(#4519): autogenerate\n        // python -c \"print(int(''.join(str(ord(c)) for c in 'CardNote')))\"\n        679711410078111116101\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-guessing-game/src/player_turn.nr"},"50":{"source":"mod player;\nmod game;\nmod player_turn;\n\ncontract GuessingGame {\n    use dep::aztec::prelude::{\n        AztecAddress, FunctionSelector, NoteHeader, NoteInterface, NoteGetterOptions, PrivateContext,\n        Map, PublicMutable, PrivateImmutable, PrivateMutable, PrivateSet, PublicImmutable, SharedImmutable\n    };\n    use dep::value_note::value_note::{ValueNote, VALUE_NOTE_LEN};\n    use dep::address_note::address_note::{AddressNote, ADDRESS_NOTE_LEN};\n    use dep::aztec::context::Context;\n    use dep::aztec::oracle::debug_log::{debug_log, debug_log_format};\n    use crate::player::Player;\n    use crate::player_turn::PlayerTurn;\n    use crate::game::Game;\n\n    struct Storage {\n        game_master: SharedImmutable<AztecAddress>,\n        lobby: PrivateSet<AddressNote>,\n        in_play: PrivateSet<Player>,\n        games: Map<Field, PublicMutable<Game>>,\n    }\n\n    #[aztec(public)]\n    #[aztec(initializer)]\n    fn constructor(gm: AztecAddress) {\n        storage.game_master.initialize(gm)\n    }\n\n    #[aztec(private)]\n    fn register(address: AztecAddress, secret: Field) {\n        let gm = storage.game_master.read_private();\n        debug_log(\"registering player\");\n        debug_log_format(\"encrypting to {0}\", [gm.to_field()]);\n        let mut address_note = AddressNote::new(address, gm);\n        storage.lobby.insert(&mut address_note, true);\n        let mut player = Player::new(address, secret);\n        storage.in_play.insert(&mut player, true);\n    }\n\n    #[aztec(private)]\n    fn pair() {\n        let options = NoteGetterOptions::new();\n        debug_log(\"getting players\");\n        let mut pair = storage.lobby.get_notes(options);\n        debug_log(\"removing players from lobby\");\n        // storage.lobby.remove(pair[0].unwrap_unchecked());\n        // storage.lobby.remove(pair[1].unwrap_unchecked());\n\n        // let mut player1 = pair[0].unwrap_unchecked().owner;\n        // let mut player2 = pair[1].unwrap_unchecked().owner;\n\n        // debug_log(\"creating new turn\");\n        // let turn = PlayerTurn::new(player1, 0);\n        // storage.games.at(0).write(Game::new([player1, player2], turn));\n    }\n\n    #[aztec(private)]\n    fn turn(game_id: Field, guess: Field) {\n        let game = storage.games.at(game_id).read();\n        let options = NoteGetterOptions::new().set_limit(1);\n        let me = storage.in_play.get_notes(options)[0].unwrap_unchecked();\n        let didMatch = game.reveal(me);\n        if (didMatch) {\n            storage.in_play.remove(me);\n        }\n\n        let opponent = game.get_opponent(context.msg_sender());\n        let turn = PlayerTurn::new(opponent, guess);\n\n        storage.games.at(game_id).write(Game::new(game.players, turn));\n    }\n}\n","path":"/Users/zpedro/Documents/GitHub/aztec-guessing-game/src/main.nr"},"52":{"source":"// docs:start:encrypted_import\nuse dep::aztec::log::emit_encrypted_log;\n// docs:end:encrypted_import\nuse dep::aztec::{\n    protocol_types::{address::AztecAddress, traits::Empty},\n    note::{note_header::NoteHeader, note_interface::NoteInterface, utils::compute_note_hash_for_consumption},\n    oracle::{rand::rand, nullifier_key::get_nullifier_secret_key, get_public_key::get_public_key},\n    hash::pedersen_hash, context::PrivateContext\n};\n\nglobal ADDRESS_NOTE_LEN: Field = 3;\n\n// docs:start:address_note_def\n// Stores an address\nstruct AddressNote {\n    address: AztecAddress,\n    owner: AztecAddress,\n    randomness: Field,\n    header: NoteHeader,\n}\n\nimpl NoteInterface<ADDRESS_NOTE_LEN>  for AddressNote {\n    fn serialize_content(self) -> [Field; ADDRESS_NOTE_LEN]{\n        [self.address.to_field(), self.owner.to_field(), self.randomness]\n    }\n\n    fn deserialize_content(serialized_note: [Field; ADDRESS_NOTE_LEN]) -> Self {\n        AddressNote {\n            address: AztecAddress::from_field(serialized_note[0]),\n            owner: AztecAddress::from_field(serialized_note[1]),\n            randomness: serialized_note[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_content_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize_content(), 0)\n    }\n\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn get_header(note: Self) -> NoteHeader {\n        note.header\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        // docs:start:encrypted\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            Self::get_note_type_id(),\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n        // docs:end:encrypted\n    }\n\n    fn get_note_type_id() -> Field {\n        // TODO(#4519): autogenerate\n        // python -c \"print(int(''.join(str(ord(c)) for c in 'AddressNote')))\"\n        6510010011410111511578111116101\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, owner: AztecAddress) -> Self {\n        let randomness = rand();\n        AddressNote { address, owner, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/address-note/src/address_note.nr"},"53":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint};\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        encryption_pub_key,\n        log\n    );\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/log.nr"},"57":{"source":"use dep::protocol_types::{\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTE_ORACLE_RETURN_LENGTH, GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE, VIEW_NOTE_ORACLE_RETURN_LENGTH\n}\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption\n};\nuse crate::oracle;\n\nfn check_note_header<Note, N>(context: PrivateContext, storage_slot: Field, note: Note) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address));\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let isEqual = fields[select.field_index] == select.value;\n        let isLt = fields[select.field_index].lt(select.value);\n\n        if (select.comparator == Comparator.EQ) {\n            assert(isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(isLt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(isLt | isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!isLt & !isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!isLt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<N>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index].lt(fields_1[sort.field_index]);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> Note where Note: NoteInterface<N> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n\n    context.push_note_hash_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let opt_notes = get_notes_internal(storage_slot, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let (num_selects, select_by, select_values, select_comparators, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n    let (num_selects, select_by, select_values, select_comparators, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [Field; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, select_comparators, sort_by, sort_order)\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/note/note_getter.nr"},"58":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_note_hash_for_insertion, compute_note_hash_for_consumption}\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    broadcast: bool\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    // As `is_transient` is true, this will compute the inner note hsah\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    // TODO: Strong typing required because of https://github.com/noir-lang/noir/issues/4088\n    let serialized_note: [Field; N] = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        inner_note_hash\n    )\n        == 0\n    );\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        Note::broadcast(*note, context, storage_slot);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note) where Note: NoteInterface<N> {\n    let mut nullifier = 0;\n    let mut consumed_note_hash: Field = 0;\n    nullifier = note.compute_nullifier(context);\n\n    // We also need the note hash corresponding to the \"nullifier\"\n    let header = note.get_header();\n    // `consumed_note_hash` is used to inform the kernel which pending note hash\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // note hash) in which case `consumed_note_hash` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note hash computed in `compute_nullifier`?\n        consumed_note_hash = compute_note_hash_for_consumption(note);\n    }\n    assert(notify_nullified_note(nullifier, consumed_note_hash) == 0);\n\n    context.push_new_nullifier(nullifier, consumed_note_hash)\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"59":{"source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__SILOED_NOTE_HASH},\n    hash::pedersen_hash, utils::arr_copy_slice\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_NOTE_HASH)\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\nfn compute_inner_note_hash<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([header.storage_slot, note_hash], 0)\n}\n\nfn compute_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let siloed_note_hash = compute_siloed_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_consumption<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed private data tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, S>(\n    // docs:start:compute_note_hash_and_nullifier_args\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S] // docs:end:compute_note_hash_and_nullifier_args\n) -> [Field; 4] where T: NoteInterface<N> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n    // docs:start:compute_note_hash_and_nullifier_returns\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_nullifier_returns\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"62":{"source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL};\nuse crate::note::note_interface::NoteInterface;\n\nstruct ComparatorEnum {\n    EQ: u8,\n    NEQ: u8,\n    LT: u8,\n    LTE: u8,\n    GT: u8,\n    GTE: u8,\n}\n\nglobal Comparator = ComparatorEnum {\n    EQ: 1,\n    NEQ: 2,\n    LT: 3,\n    LTE: 4,\n    GT: 5,\n    GTE: 6,\n};\n\nstruct Select {\n    field_index: u8,\n    value: Field,\n    comparator: u8,\n}\n\nimpl Select {\n    pub fn new(field_index: u8, value: Field, comparator: u8) -> Self {\n        Select { field_index, value, comparator }\n    }\n}\n\nstruct SortOrderEnum {\n    DESC: u8,\n    ASC: u8,\n}\n\nglobal SortOrder = SortOrderEnum {\n    DESC: 1,\n    ASC: 2,\n};\n\nstruct Sort {\n    field_index: u8,\n    order: u8,\n}\n\nimpl Sort {\n    pub fn new(field_index: u8, order: u8) -> Self {\n        Sort { field_index, order }\n    }\n}\n\nstruct NoteStatusEnum {\n    ACTIVE: u8,\n    ACTIVE_OR_NULLIFIED: u8,\n}\n\nglobal NoteStatus = NoteStatusEnum {\n    ACTIVE: 1,\n    ACTIVE_OR_NULLIFIED: 2,\n    // TODO 4217: add 'NULLIFIED'\n};\n\nfn return_all_notes<Note, N>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    _p: Field\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    notes\n}\n\n// docs:start:NoteGetterOptions\nstruct NoteGetterOptions<Note, N, FILTER_ARGS> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    filter: fn ([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], FILTER_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    filter_args: FILTER_ARGS,\n    status: u8,\n}\n// docs:end:NoteGetterOptions\n\n// When retrieving notes using the NoteGetterOptions, the configurations are applied in a specific sequence to ensure precise and controlled data retrieval.\n// The database-level configurations are applied first:\n// `selects` to specify fields, `sorts` to establish sorting criteria, `offset` to skip items, and `limit` to cap the result size.\n// And finally, a custom filter to refine the outcome further.\nimpl<Note, N, FILTER_ARGS> NoteGetterOptions<Note, N, FILTER_ARGS> {\n    // This function initializes a NoteGetterOptions that simply returns the maximum number of notes allowed in a call.\n    pub fn new() -> NoteGetterOptions<Note, N, Field> where Note: NoteInterface<N> {\n        NoteGetterOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTE_HASH_READ_REQUESTS_PER_CALL as u32,\n            offset: 0,\n            filter: return_all_notes,\n            filter_args: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n\n    // This function initializes a NoteGetterOptions with a filter, which takes the notes returned from the database and filter_args as its parameters.\n    // `filter_args` allows you to provide additional data or context to the custom filter.\n    pub fn with_filter(\n        filter: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], FILTER_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n        filter_args: FILTER_ARGS\n    ) -> Self where Note: NoteInterface<N> {\n        NoteGetterOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTE_HASH_READ_REQUESTS_PER_CALL as u32,\n            offset: 0,\n            filter,\n            filter_args,\n            status: NoteStatus.ACTIVE\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select, \n    // a value representing the specific value to match in that field, and \n    // a comparator (For possible values of comparators, please see the Comparator enum above)\n    pub fn select(&mut self, field_index: u8, value: Field, comparator: Option<u8>) -> Self {\n        self.selects.push(Option::some(Select::new(field_index, value, comparator.unwrap_or(Comparator.EQ))));\n        *self\n    }\n\n    // This method adds a `Sort` criterion to the options.\n    // It takes a field_index indicating which field to sort by and an order (SortOrder) to determine the sorting direction.\n    pub fn sort(&mut self, field_index: u8, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(field_index, order)));\n        *self\n    }\n\n    // This method lets you set a limit for the maximum number of notes to be retrieved in a single query result.\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTE_HASH_READ_REQUESTS_PER_CALL as u32);\n        self.limit = limit;\n        *self\n    }\n\n    // This method sets the offset value, which determines where to start retrieving notes in the query results.\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/note/note_getter_options.nr"},"69":{"source":"use crate::{\n    context::{inputs::PublicContextInputs, interface::ContextInterface},\n    messaging::process_l1_to_l2_message, oracle::{arguments, public_call::call_public_function_internal}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::hash_args, header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_non_existent_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL>,\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl ContextInterface for PublicContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_non_existent_read_requests: BoundedVec::new(),\n            contract_storage_update_requests: BoundedVec::new(),\n            contract_storage_reads: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            unencrypted_logs_hash: BoundedVec::new(),\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_non_existent_read_requests: self.nullifier_non_existent_read_requests.storage,\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address,\n            reverted: false\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_non_existent_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_non_existent_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let side_effect_counter = self.side_effect_counter;\n        // TODO get next value from output of `call_public_function_internal`\n        self.side_effect_counter += 1;\n\n        call_public_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        )\n    }\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"71":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, interface::ContextInterface},\n    key::nullifier_key::validate_nullifier_key_against_address, messaging::process_l1_to_l2_message,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    debug_log::debug_log\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs, read_request::ReadRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, hash::hash_args, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::is_empty\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    note_hash_read_requests: BoundedVec<SideEffect, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl ContextInterface for PrivateContext {\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        if is_empty(inputs.call_context.msg_sender) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            nullifier_key_validation_requests: BoundedVec::new(),\n            new_note_hashes: BoundedVec::new(),\n            new_nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            new_l2_to_l1_msgs: BoundedVec::new(),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.note_hash_read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.side_effect_counter };\n        self.nullifier_read_requests.push(request);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n                nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                start_side_effect_counter: 0,\n                end_side_effect_counter: 0,\n                unencrypted_logs_hash: [0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero(),\n                reverted: false\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"77":{"source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u64;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u64 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u64 = 2; // nonce & is_transient.\n            let read_offset: u64 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n            Note::set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"80":{"source":"use dep::protocol_types::{address::{AztecAddress, PartialAddress, PublicKeysHash}, grumpkin_point::GrumpkinPoint};\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: AztecAddress) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: AztecAddress) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: AztecAddress) -> GrumpkinPoint {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key = GrumpkinPoint::new(result[0], result[1]);\n    let partial_address = PartialAddress::from_field(result[2]);\n\n    let calculated_address = AztecAddress::compute(PublicKeysHash::compute(pub_key), partial_address);\n    assert(calculated_address.eq(address));\n\n    pub_key\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/oracle/get_public_key.nr"},"81":{"source":"use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"83":{"source":"use dep::protocol_types::{address::AztecAddress, constants::NUM_FIELDS_PER_SHA256, grumpkin_point::GrumpkinPoint};\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _encryption_pub_key: GrumpkinPoint,\n    _preimage: [Field; N]\n) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    preimage: [Field; N]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [\n        emit_encrypted_log_oracle(\n            contract_address,\n            storage_slot,\n            note_type_id,\n            encryption_pub_key,\n            preimage\n        ), 0\n    ]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(\n    _contract_address: AztecAddress,\n    _event_selector: Field,\n    _message: T\n) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: T\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"84":{"source":"// Utility function to console.log data in the acir simulator\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n\n#[oracle(debugLog)]\nfn debug_log_oracle<T, N>(_msg: T, _num_args: Field) -> Field {}\n#[oracle(debugLog)]\nfn debug_log_format_oracle<T, N>(_msg: T, _args: [Field; N], _num_args: Field) -> Field {}\n#[oracle(debugLog)]\nfn debug_log_field_oracle(_field: Field) -> Field {}\n#[oracle(debugLog)]\nfn debug_log_array_oracle<T, N>(_arbitrary_array: [T; N]) -> Field {}\n#[oracle(debugLogWithPrefix)]\nfn debug_log_array_with_prefix_oracle<S, T, N>(_prefix: S, _arbitrary_array: [T; N]) -> Field {}\n\n/// NOTE: call this with a str<N> msg of length > 1\n/// Example:\n/// `debug_log(\"blah blah this is a debug string\");`\nunconstrained pub fn debug_log<T>(msg: T) {\n    assert(debug_log_oracle(msg, 0) == 0);\n}\n\n/// NOTE: call this with a str<N> msg of form\n/// \"some string with {0} and {1} ... {N}\"\n/// and an array of N field which will be formatted\n/// into the string in the simulator.\n/// Example:\n/// debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\nunconstrained pub fn debug_log_format<T, N>(msg: T, args: [Field; N]) {\n    assert(debug_log_format_oracle(msg, args, args.len() as Field) == 0);\n}\n\n/// Example:\n/// `debug_log_field(my_field);`\nunconstrained pub fn debug_log_field(field: Field) {\n    assert(debug_log_field_oracle(field) == 0);\n}\n\n/// Example:\n/// `debug_log_array(my_array);`\nunconstrained fn debug_log_array<T, N>(arbitrary_array: [T; N]) {\n    assert(debug_log_array_oracle(arbitrary_array) == 0);\n}\n\n/// Example:\n/// `debug_log_array_with_prefix(\"Prefix\", my_array);`\nunconstrained pub fn debug_log_array_with_prefix<S, T, N>(prefix: S, arbitrary_array: [T; N]) {\n    assert(debug_log_array_with_prefix_oracle(prefix, arbitrary_array) == 0);\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/oracle/debug_log.nr"},"85":{"source":"#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\nunconstrained pub fn rand() -> Field {\n    rand_oracle()\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/oracle/rand.nr"},"88":{"source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, hash::pedersen_hash,\n    public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage, traits::{Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u64 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nfn get_public_data_witness_oracle(\n    _block_number: u32,\n    _leaf_slot: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, leaf_slot: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, leaf_slot);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u64, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"89":{"source":"use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint, grumpkin_private_key::GrumpkinPrivateKey};\n\nstruct NullifierKeyPair {\n    account: AztecAddress,\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> NullifierKeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    NullifierKeyPair {\n        account,\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinPrivateKey { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> NullifierKeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinPrivateKey {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/oracle/nullifier_key.nr"},"90":{"source":"use dep::protocol_types::{address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH};\n\n#[oracle(getContractInstance)]\nfn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"91":{"source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, hash::pedersen_hash, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: Field = 24;\n\nstruct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nfn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nfn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr"},"98":{"source":"mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod interface;\nmod avm;\n\nuse private_context::PrivateContext;\nuse interface::ContextInterface;\nuse public_context::PublicContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n    public_vm: Option<&mut AVMContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none(), public_vm: Option::none() }\n    }\n\n    pub fn public_vm(context: &mut AVMContext) -> Context {\n        Context { public_vm: Option::some(context), public: Option::none(), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none(), public_vm: Option::none() }\n    }\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/context.nr"},"102":{"source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::pedersen_hash, address::{AztecAddress},\n    header::Header, utils::field::full_field_less_than\n};\nuse dep::std::merkle::compute_merkle_root;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::{get_public_data_witness}};\n\nfn _public_value_inclusion(\n    value: Field,\n    storage_slot: Field,\n    contract_address: AztecAddress,\n    header: Header\n) {\n    // 1) Compute the leaf slot by siloing the storage slot with the contract address\n    let public_value_leaf_slot = pedersen_hash(\n        [contract_address.to_field(), storage_slot],\n        GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n    );\n\n    // 3) Get the membership witness of the slot\n    let witness = get_public_data_witness(\n        header.global_variables.block_number as u32,\n        public_value_leaf_slot\n    );\n\n    // 4) Check that the witness matches the corresponding public_value\n    let preimage = witness.leaf_preimage;\n\n    // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n    // 1. The value is the same as the one in the witness\n    // 2. The value was never initialized and is zero\n    let is_less_than_slot = full_field_less_than(preimage.slot, public_value_leaf_slot);\n    let is_next_greater_than = full_field_less_than(public_value_leaf_slot, preimage.next_slot);\n    let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n    let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n    if is_in_range {\n        assert_eq(value, 0, \"Non-existant public data leaf value is non-zero\");\n    } else {\n        assert_eq(preimage.slot, public_value_leaf_slot, \"Public data slot don't match witness\");\n        assert_eq(preimage.value, value, \"Public value does not match the witness\");\n    }\n\n    // 5) Prove that the leaf we validated is in the public data tree\n    assert(\n        header.state.partial.public_data_tree.root\n        == compute_merkle_root(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n    );\n    // --> Now we have traversed the trees all the way up to archive root and that way verified that a specific\n    // `value` was really set in a given contract storage slot at block `block_number` in public data tree.\n}\n\npub fn prove_public_value_inclusion(\n    value: Field, // The value that we want to prove is in the public data tree\n    storage_slot: Field, // The storage slot in which the value is stored\n    contract_address: AztecAddress, // The contract we want to look into\n    context: PrivateContext\n) {\n    _public_value_inclusion(\n        value,\n        storage_slot,\n        contract_address,\n        context.historical_header\n    );\n}\n\npub fn prove_public_value_inclusion_at(\n    value: Field, // The value that we want to prove is in the public data tree\n    storage_slot: Field, // The storage slot in which the value is stored\n    contract_address: AztecAddress, // The contract we want to look into\n    block_number: u32, // The block at which we'll prove that the note exists\n    context: PrivateContext\n) {\n    let header = context.get_header_at(block_number);\n\n    _public_value_inclusion(value, storage_slot, contract_address, header);\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/history/public_value_inclusion.nr"},"105":{"source":"use dep::std::merkle::compute_merkle_root;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::{PrivateContext, ContextInterface},\n    oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::NoteInterface}\n};\n\nfn _nullifier_inclusion(nullifier: Field, header: Header) {\n    // 1) Get the membership witness of the nullifier\n    let witness = get_nullifier_membership_witness(header.global_variables.block_number as u32, nullifier);\n\n    // 2) Check that the witness we obtained matches the nullifier\n    assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n\n    // 3) Compute the nullifier tree leaf\n    let nullifier_leaf = witness.leaf_preimage.hash();\n\n    // 4) Prove that the nullifier is in the nullifier tree\n    assert(\n        header.state.partial.nullifier_tree.root\n        == compute_merkle_root(nullifier_leaf, witness.index, witness.path), \"Proving nullifier inclusion failed\"\n    );\n    // --> Now we have traversed the trees all the way up to archive root and verified that the nullifier\n    //     was included in the nullifier tree.\n}\n\npub fn prove_nullifier_inclusion<TContext>(\n    nullifier: Field,\n    context: TContext\n) where TContext: ContextInterface {\n    _nullifier_inclusion(nullifier, context.get_header());\n}\n\npub fn prove_nullifier_inclusion_at(\n    nullifier: Field,\n    block_number: u32, // The block at which we'll prove that the nullifier exists in the nullifier tree\n    context: PrivateContext\n) {\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n\npub fn prove_note_is_nullified<Note, N>(\n    note: Note,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n\n    _nullifier_inclusion(nullifier, context.historical_header);\n}\n\npub fn prove_note_is_nullified_at<Note, N>(\n    note: Note,\n    block_number: u32,\n    context: &mut PrivateContext\n) where Note: NoteInterface<N> {\n    let nullifier = compute_siloed_nullifier(note, context);\n    let header = context.get_header_at(block_number);\n\n    _nullifier_inclusion(nullifier, header);\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr"},"106":{"source":"use dep::protocol_types::{\n    hash::{silo_nullifier, pedersen_hash},\n    constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext, ContextInterface},\n    oracle::get_contract_instance::get_contract_instance,\n    history::nullifier_inclusion::prove_nullifier_inclusion,\n};\n\npub fn mark_as_initialized<TContext>(context: &mut TContext) where TContext: ContextInterface {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(*context);\n    ContextInterface::push_new_nullifier(context, init_nullifier, 0);\n}\n\npub fn assert_is_initialized<TContext>(context: &mut TContext) where TContext: ContextInterface {\n    let init_nullifier = compute_contract_initialization_nullifier(*context);\n    prove_nullifier_inclusion(init_nullifier, *context);\n}\n\npub fn compute_contract_initialization_nullifier<TContext>(context: TContext) -> Field where TContext: ContextInterface {\n    let address = context.this_address();\n    silo_nullifier(\n        address,\n        compute_unsiloed_contract_initialization_nullifier(context)\n    )\n}\n\npub fn compute_unsiloed_contract_initialization_nullifier<TContext>(context: TContext) -> Field where TContext: ContextInterface {\n    context.this_address().to_field()\n}\n\npub fn assert_initialization_matches_address_preimage<TContext>(context: TContext) where TContext: ContextInterface {\n    let address = context.this_address(); \n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert((instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\");\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    pedersen_hash([init_selector.to_field(), init_args_hash], GENERATOR_INDEX__CONSTRUCTOR)\n}","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/initializer.nr"},"112":{"source":"use crate::{\n    context::Context, history::public_value_inclusion::prove_public_value_inclusion,\n    oracle::{storage::{storage_read, storage_write}}, state_vars::storage::Storage\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\nstruct SharedImmutable<T>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T> Storage<T> for SharedImmutable<T> {}\n\nimpl<T> SharedImmutable<T> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    // Intended to be only called once. \n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(\n            self.context.private.is_none(), \"SharedImmutable can only be initialized from public functions\"\n        );\n        // TODO(#4738): Uncomment the following assert\n        // assert(\n        //     self.context.public.unwrap_unchecked().is_deployment(), \"SharedImmutable can only be initialized during contract deployment\"\n        // );\n\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let fields_read: [Field; 1] = storage_read(initialization_slot);\n        assert(fields_read[0] == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        storage_write(initialization_slot, [0xdead]);\n\n        let fields_write = T::serialize(value);\n        storage_write(self.storage_slot, fields_write);\n    }\n\n    pub fn read_public<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public read only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n\n    pub fn read_private<T_SERIALIZED_LEN>(self) -> T  where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.public.is_none(), \"Private read only supported in private functions\");\n        let private_context = self.context.private.unwrap();\n\n        // Read the value from storage (using the public tree)\n        let fields = storage_read(self.storage_slot);\n\n        // Loop over the fields and prove their inclusion in the public tree\n        for i in 0..fields.len() {\n            // TODO: Update membership proofs to use current header (Requires #4179)\n            // Currently executing unnecessary computation:\n            // - a membership proof of the value in the public tree of the header \n            prove_public_value_inclusion(\n                fields[i],\n                self.storage_slot + i as Field,\n                (*private_context).this_address(),\n                (*private_context)\n            )\n        }\n        T::deserialize(fields)\n    }\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr"},"113":{"source":"use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::protocol_types::{hash::pedersen_hash, traits::{ToField}};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()], 0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"115":{"source":"use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T> Storage<T> for PublicMutable<T> {}\n\nimpl<T> PublicMutable<T> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n\n    // docs:start:public_mutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable reads only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"PublicMutable writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_mutable_struct_write\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"117":{"source":"use dep::protocol_types::{\n    constants::{MAX_NOTES_PER_PAGE, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    abis::side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader, note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateSet<Note> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for PrivateSet<T> {}\n\nimpl<Note> PrivateSet<Note> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n    // docs:start:insert\n    pub fn insert<N>(self, note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            broadcast\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public<N>(self, note: &mut Note) where Note: NoteInterface<N> {\n        create_note_hash_from_public(self.context.public.unwrap(), self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n\n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(\n            false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use PrivateSet.get_notes() and PrivateSet.remove() in your contract to verify and remove a note.\"\n        );\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(\n            false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use PrivateSet.get_notes() and PrivateSet.remove() in your contract to verify and remove a note.\"\n        );\n    }\n\n    // docs:start:remove\n    pub fn remove<N>(self, note: Note) where Note: NoteInterface<N> {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_consumption(note);\n        let has_been_read = context.note_hash_read_requests.any(|r: SideEffect| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(context, note);\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<N, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>\n    ) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(self.context.private.unwrap(), storage_slot, options);\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes<N>(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr"},"120":{"source":"use dep::protocol_types::{hash::hash_args, traits::Hash};\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/aztec/src/hasher.nr"},"144":{"source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u64 = 3;\n\nuse crate::{merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}};\n\nstruct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u64,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            nullifier : 0,\n            next_nullifier : 0,\n            next_index : 0,\n        }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u64 }\n    }\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr"},"158":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_field(value: Field) -> Self {\n        Self { inner: value as u32 }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"196":{"source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"200":{"source":"use crate::traits::{Empty, Hash};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u64,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr"},"202":{"source":"use dep::std::cmp::Eq;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"207":{"source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    portal_contract_address : EthAddress,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt) &\n        self.portal_contract_address.eq(other.portal_contract_address)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.portal_contract_address.to_field(),\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            portal_contract_address: EthAddress::from_field(serialized[4]),\n            public_keys_hash: PublicKeysHash::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.portal_contract_address,\n                self.deployer\n            )\n        )\n    }\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"208":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u64) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/utils.nr"},"209":{"source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address,\n                deployer\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n    let deployer = AztecAddress::from_field(7);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address,\n        deployer\n    );\n\n    let expected_computed_address_from_preimage = 0x027ea2b41ced2ec9a98305984e96dd28518536a4628883ccdc06e38aa8997220;\n    assert(address.to_field() == expected_computed_address_from_preimage);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"210":{"source":"use crate::{\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{ToField, Serialize, Deserialize}\n};\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl Eq for PublicKeysHash {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash(\n                [\n            public_key.x,\n            public_key.y\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let actual = PublicKeysHash::compute(point);\n    let expected_public_keys_hash = 0x1923a6246e305720b6aaf751fde0342613e93c82e455c3831e28375c16dd40d8;\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/address/public_keys_hash.nr"},"211":{"source":"use crate::{\n    address::{eth_address::EthAddress, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field(),\n            portal_contract_address.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"212":{"source":"use crate::{\n    address::{\n    eth_address::EthAddress, salted_initialization_hash::SaltedInitializationHash,\n    aztec_address::AztecAddress\n},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::pedersen_hash, traits::ToField\n};\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, portal_contract_address, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"213":{"source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr"},"214":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n    ARGS_HASH_CHUNK_COUNT, ARGS_HASH_CHUNK_LENGTH, FUNCTION_TREE_HEIGHT, NUM_FIELDS_PER_SHA256,\n    GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__VK,\n    GENERATOR_INDEX__CONSTRUCTOR, GENERATOR_INDEX__PARTIAL_ADDRESS, GENERATOR_INDEX__CONTRACT_ADDRESS,\n    GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__FUNCTION_ARGS\n};\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\nuse crate::merkle_tree::root::root_from_sibling_path;\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < args.len() {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < args.len() {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: u64) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn compute_unique_siloed_note_hashes<N>(\n    first_nullifier: Field,\n    siloed_note_hashes: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_note_hashes = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_note_hash = siloed_note_hashes[i];\n        if siloed_note_hash.value != 0 {\n            let nonce = compute_note_hash_nonce(first_nullifier, i);\n            unique_siloed_note_hashes[i] = SideEffect {\n                value: compute_unique_siloed_note_hash(nonce, siloed_note_hash.value),\n                counter: siloed_note_hash.counter\n                };\n        }\n    }\n    unique_siloed_note_hashes\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n    assert(result == 0x142a6d57007171f6eaa33d55976d9dbe739c889c8e920f115f7808dea184c718);\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = [0; 800];\n    for i in 0..800 {\n        input[i] = i as Field;\n    }\n    let hash = hash_args(input);\n    assert(hash == 0x371960dd84ed3445ab099ac4c1af5ba90e0c713b593e0ca52ee532087c7f097);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0x2266ac2f9f0c19c015239ef5ea85862fc6fac00db73779b220a4d49c4856c2e1);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x0f24729168d4450a5681beafa5e3a899ac28bd17bf5a4877dab37bcd834e1634);\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"228":{"source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}},\n    note::{note_header::NoteHeader, note_interface::NoteInterface, utils::compute_note_hash_for_consumption},\n    oracle::{rand::rand, nullifier_key::get_nullifier_secret_key, get_public_key::get_public_key},\n    log::emit_encrypted_log, hash::pedersen_hash, context::PrivateContext\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\n// docs:start:value-note-def\nstruct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n    header: NoteHeader,\n}\n// docs:end:value-note-def\n\nimpl NoteInterface<VALUE_NOTE_LEN> for ValueNote {\n    fn serialize_content(self) -> [Field; VALUE_NOTE_LEN] {\n        [self.value, self.owner.to_field(), self.randomness]\n    }\n\n    fn deserialize_content(serialized_note: [Field; VALUE_NOTE_LEN]) -> Self {\n        ValueNote {\n            value: serialized_note[0],\n            owner: AztecAddress::from_field(serialized_note[1]),\n            randomness: serialized_note[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_content_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize_content(),0)\n    }\n\n    // docs:start:nullifier\n\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    // docs:end:nullifier\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            Self::get_note_type_id(),\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n    }\n\n    fn get_note_type_id() -> Field {\n        // TODO(#4519): autogenerate\n        // python -c \"print(int(''.join(str(ord(c)) for c in 'ValueNote')))\"\n        869710811710178111116101\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote { value, owner, randomness, header }\n    }\n}\n\nimpl Serialize<7> for ValueNote {\n    fn serialize(self) -> [Field; 7] {\n        let header = self.header.serialize();\n\n        [self.value, self.owner.to_field(), self.randomness, header[0], header[1], header[2], header[3]]\n    }\n}\n","path":"/Users/zpedro/nargo/github.com/AztecProtocol/aztec-packages/master/noir-projects/aztec-nr/value-note/src/value_note.nr"}}}